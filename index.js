import dotenv from "dotenv";
dotenv.config();

import TelegramBot from "node-telegram-bot-api";
import express from "express";
import moment from "moment-timezone";
import fs from "fs";
import path from "path";

// ====== –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è ======
const TELEGRAM_TOKEN = process.env.TELEGRAM_TOKEN;
const TIMEZONE = process.env.TIMEZONE || "Europe/Kiev";
const TASKS_FILE = path.join(process.cwd(), "tasks.json");
const USERS_FILE = path.join(process.cwd(), "userIds.json");

// ====== –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –±–æ—Ç–∞ ======
const bot = new TelegramBot(TELEGRAM_TOKEN, { polling: true });

// ====== –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ ======
let userIds = {};
try {
  if (fs.existsSync(USERS_FILE)) {
    userIds = JSON.parse(fs.readFileSync(USERS_FILE, "utf8"));
  }
} catch (err) {
  console.error("–ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è users:", err);
  userIds = {};
}

// ====== –°–∏—Å—Ç–µ–º–∞ –∑–∞–¥–∞—á ======
let tasks = [];
let nextTaskId = 1;

// ====== –£—Ç–∏–ª—ñ—Ç–∏ ======
function chunkButtons(buttons, n = 2) {
  const rows = [];
  for (let i = 0; i < buttons.length; i += n) {
    rows.push(buttons.slice(i, i + n));
  }
  return rows;
}

function safeSendMessage(chatId, text, options = {}) {
  return bot.sendMessage(chatId, text, options).catch(err => {
    if (err.response && err.response.statusCode === 429) {
      const retryAfter = err.response.parameters?.retry_after || 5;
      console.log(`‚è≥ Telegram flood. Retry after ${retryAfter} sec`);
      setTimeout(() => safeSendMessage(chatId, text, options), retryAfter * 1000);
    } else {
      console.error("–ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥–ø—Ä–∞–≤–∫–∏:", err);
      throw err;
    }
  });
}

function sendToUserOrGroup(userId, chatId, text, options = {}) {
  return safeSendMessage(userId, text, options).catch(() => {
    if (chatId) {
      return safeSendMessage(chatId, text, options);
    }
    throw new Error("–ù–µ –≤–¥–∞–ª–æ—Å—å –≤—ñ–¥–ø—Ä–∞–≤–∏—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è");
  });
}

// ====== –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è —Ç–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö ======
function loadTasks() {
  try {
    if (fs.existsSync(TASKS_FILE)) {
      const data = fs.readFileSync(TASKS_FILE, "utf8");
      tasks = JSON.parse(data);
      nextTaskId = tasks.length > 0 ? Math.max(...tasks.map(t => t.id)) + 1 : 1;
    }
  } catch (err) {
    console.error("–ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è tasks:", err);
    tasks = [];
    nextTaskId = 1;
  }
}

function saveTasks() {
  try {
    fs.writeFileSync(TASKS_FILE, JSON.stringify(tasks, null, 2));
  } catch (err) {
    console.error("–ü–æ–º–∏–ª–∫–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è tasks:", err);
  }
}

function saveUsers() {
  try {
    fs.writeFileSync(USERS_FILE, JSON.stringify(userIds, null, 2));
  } catch (err) {
    console.error("–ü–æ–º–∏–ª–∫–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è users:", err);
  }
}

loadTasks();
const createInputKeyboard = () => {
  return {
    keyboard: [
      [{ text: "/help" }, { text: "/tasks" }],
      [{ text: "/tasks_status" }, { text: "/hide" }],
      [{ text: "/keyboard" }]
    ],
    resize_keyboard: true,
    one_time_keyboard: false
  };
};
// ====== –û–±—Ä–æ–±–∫–∞ /start ======
// bot.onText(/\/start/, (msg) => {
//   const chatId = msg.chat.id;
//   const username = msg.from.username;

//   if (!username) {
//     return bot.sendMessage(chatId, "‚ùå –ë–æ—Ç –ø–æ—Ç—Ä–µ–±—É—î username –¥–ª—è –∫–æ—Ä–µ–∫—Ç–Ω–æ—ó —Ä–æ–±–æ—Ç–∏. –ë—É–¥—å –ª–∞—Å–∫–∞, –≤—Å—Ç–∞–Ω–æ–≤—ñ—Ç—å username –≤ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è—Ö Telegram.");
//   }

//   if (!userIds[username]) {
//     userIds[username] = chatId;
//     saveUsers();
//   }

//   bot.sendMessage(chatId, `–ü—Ä–∏–≤—ñ—Ç, ${msg.from.first_name}! –ë–æ—Ç –∞–∫—Ç–∏–≤–æ–≤–∞–Ω–∏–π ‚úÖ\n\n–í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π /help –¥–ª—è —ñ–Ω—Å—Ç—Ä—É–∫—Ü—ñ—ó.`);
// });
bot.onText(/\/start/, (msg) => {
  const chatId = msg.chat.id;
  const username = msg.from.username;
    if (!username) {
      return bot.sendMessage(chatId, "‚ùå –ë–æ—Ç –ø–æ—Ç—Ä–µ–±—É—î username –¥–ª—è –∫–æ—Ä–µ–∫—Ç–Ω–æ—ó —Ä–æ–±–æ—Ç–∏. –ë—É–¥—å –ª–∞—Å–∫–∞, –≤—Å—Ç–∞–Ω–æ–≤—ñ—Ç—å username –≤ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è—Ö Telegram.");
    }

    if (!userIds[username]) {
      userIds[username] = chatId;
      saveUsers();
    }

    bot.sendMessage(chatId, `–ü—Ä–∏–≤—ñ—Ç, ${msg.from.first_name}! –ë–æ—Ç –∞–∫—Ç–∏–≤–æ–≤–∞–Ω–∏–π ‚úÖ\n\n–í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π /help –¥–ª—è —ñ–Ω—Å—Ç—Ä—É–∫—Ü—ñ—ó. –¢–∞, —â–æ–± –ø—Ä–∏—Ö–æ–≤–∞—Ç–∏ –∫–ª–∞–≤—ñ–∞—Ç—É—Ä—É –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /hide`);
  
});

// ====== –û–±—Ä–æ–±–∫–∞ –ø–æ–º–∏–ª–æ–∫ ======
bot.on("polling_error", (err) => {
  console.error("–ü–æ–º–∏–ª–∫–∞ polling:", err.code, err.response?.body || err);
});

// ====== –û–±—Ä–æ–±–∫–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å ======
bot.on("message", (msg) => {
  const chatId = msg.chat.id;
  const text = msg.text;
  const userId = msg.from.id;
  const isPrivate = msg.chat.type === 'private';
  
  if (!text || text.startsWith('/')) return;

  // –û–±—Ä–æ–±–∫–∞ –∫–∞—Å—Ç–æ–º–Ω–æ–≥–æ –Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è
  const waitingCustomRemindTask = tasks.find(t => t.waitingCustomRemind === userId);
  if (waitingCustomRemindTask) {
    const hours = parseFloat(text.replace(',', '.'));
    if (isNaN(hours) || hours <= 0) {
      return bot.sendMessage(chatId, "‚ùå –í–≤–µ–¥—ñ—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω–µ —á–∏—Å–ª–æ –≥–æ–¥–∏–Ω (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥: 1.5 –∞–±–æ 2).");
    }

    waitingCustomRemindTask.reminderMinutes = hours * 60;
    delete waitingCustomRemindTask.waitingCustomRemind;
    saveTasks();

    return bot.sendMessage(chatId, `‚è∞ –ù–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è –¥–ª—è –∑–∞–¥–∞—á—ñ #${waitingCustomRemindTask.id} –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –Ω–∞ ${hours} –≥–æ–¥. –¥–æ –¥–µ–¥–ª–∞–π–Ω—É.`);
  }

  // –û–±—Ä–æ–±–∫–∞ –∑–º—ñ–Ω–∏ –¥–µ–¥–ª–∞–π–Ω—É –≤–∏–∫–æ–Ω–∞–≤—Ü–µ–º (–∑ –ø—Ä–∏—á–∏–Ω–æ—é)
  const waitingDeadlineChangeTask = tasks.find(t => t.waitingDeadlineChange === userId);
  if (waitingDeadlineChangeTask) {
    const newDeadlineMatch = text.match(/^(\d{2}\.\d{2})\s+(\d{2}:\d{2})$/);
    if (!newDeadlineMatch) {
      return bot.sendMessage(chatId, "‚ùå –§–æ—Ä–º–∞—Ç –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π. –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ DD.MM HH:mm (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥: 25.12 14:30)");
    }

    const year = new Date().getFullYear();
    const fullDateStr = `${newDeadlineMatch[1]}.${year} ${newDeadlineMatch[2]}`;
    const newDeadline = moment.tz(fullDateStr, "DD.MM.YYYY HH:mm", TIMEZONE).toDate();

    if (newDeadline.toString() === 'Invalid Date') {
      return bot.sendMessage(chatId, "‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∞ –¥–∞—Ç–∞. –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ —Ñ–æ—Ä–º–∞—Ç DD.MM HH:mm");
    }

    // –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –ø—Ä–æ–ø–æ–∑–∏—Ü—ñ—é –∑–º—ñ–Ω–∏ –¥–µ–¥–ª–∞–π–Ω—É
    waitingDeadlineChangeTask.pendingDeadlineChange = {
      newDeadline: newDeadline,
      reason: null,
      proposedBy: userId,
      proposedByName: msg.from.username || msg.from.first_name
    };
    delete waitingDeadlineChangeTask.waitingDeadlineChange;
    saveTasks();

    return bot.sendMessage(chatId, "üìù –¢–µ–ø–µ—Ä –≤–≤–µ–¥—ñ—Ç—å –ø—Ä–∏—á–∏–Ω—É –∑–º—ñ–Ω–∏ –¥–µ–¥–ª–∞–π–Ω—É:");
  }

  // –û–±—Ä–æ–±–∫–∞ –ø—Ä–∏—á–∏–Ω–∏ –∑–º—ñ–Ω–∏ –¥–µ–¥–ª–∞–π–Ω—É
  const waitingReasonTask = tasks.find(t => t.pendingDeadlineChange && t.pendingDeadlineChange.reason === null && t.pendingDeadlineChange.proposedBy === userId);
  if (waitingReasonTask) {
    waitingReasonTask.pendingDeadlineChange.reason = text;
    saveTasks();

    const deadlineStr = moment(waitingReasonTask.pendingDeadlineChange.newDeadline).tz(TIMEZONE).format("DD.MM, HH:mm");
    
    // –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤–∏–∫–æ–Ω–∞–≤—Ü—é
    bot.sendMessage(chatId, "‚úÖ –ü—Ä–æ–ø–æ–∑–∏—Ü—ñ—é –∑–º—ñ–Ω–∏ –¥–µ–¥–ª–∞–π–Ω—É –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ –ø–æ—Å—Ç–∞–Ω–æ–≤–Ω–∏–∫—É –∑–∞–¥–∞—á—ñ. –í—ñ–Ω –º–æ–∂–µ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏ –∞–±–æ –≤—ñ–¥—Ö–∏–ª–∏—Ç–∏ –∑–º—ñ–Ω—É —á–µ—Ä–µ–∑ –±–æ—Ç–∞.");

    // –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø–æ—Å—Ç–∞–Ω–æ–≤–Ω–∏–∫—É
    const notificationText = `üîÑ –í–∏–∫–æ–Ω–∞–≤–µ—Ü—å ${waitingReasonTask.pendingDeadlineChange.proposedByName} –∑–∞–ø—Ä–æ–ø–æ–Ω—É–≤–∞–≤ –∑–º—ñ–Ω–∏—Ç–∏ –¥–µ–¥–ª–∞–π–Ω –∑–∞–¥–∞—á—ñ #${waitingReasonTask.id} "${waitingReasonTask.title}"\n\n–ù–æ–≤–∏–π –¥–µ–¥–ª–∞–π–Ω: ${deadlineStr}\n–ü—Ä–∏—á–∏–Ω–∞: ${text}`;

    const authorButtons = [
      [
        { 
          text: "‚úÖ –ü—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏", 
          callback_data: `confirm_deadline_${waitingReasonTask.id}` 
        },
        { 
          text: "‚ùå –í—ñ–¥—Ö–∏–ª–∏—Ç–∏", 
          callback_data: `reject_deadline_${waitingReasonTask.id}` 
        }
      ]
    ];

    // –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –ø–æ—Å—Ç–∞–Ω–æ–≤–Ω–∏–∫—É
    if (waitingReasonTask.authorId) {
      safeSendMessage(
        waitingReasonTask.authorId, 
        notificationText,
        { reply_markup: { inline_keyboard: authorButtons } }
      ).catch(() => {
        // –Ø–∫—â–æ –Ω–µ –≤–¥–∞–ª–æ—Å—å –≤—ñ–¥–ø—Ä–∞–≤–∏—Ç–∏ –ø—Ä–∏–≤–∞—Ç–Ω–æ, –≤—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –≤ –≥—Ä—É–ø—É
        if (waitingReasonTask.chatId) {
          safeSendMessage(
            waitingReasonTask.chatId, 
            notificationText,
            { reply_markup: { inline_keyboard: authorButtons } }
          );
        }
      });
    } else if (waitingReasonTask.chatId) {
      // –Ø–∫—â–æ –Ω–µ–º–∞—î authorId, –≤—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –≤ –≥—Ä—É–ø—É
      safeSendMessage(
        waitingReasonTask.chatId, 
        notificationText,
        { reply_markup: { inline_keyboard: authorButtons } }
      );
    }

    return;
  }

  // –û–±—Ä–æ–±–∫–∞ –∑–º—ñ–Ω–∏ –¥–µ–¥–ª–∞–π–Ω—É –ø–æ—Å—Ç–∞–Ω–æ–≤–Ω–∏–∫–æ–º
  const waitingDeadlineTask = tasks.find(t => t.waitingDeadlineChange === userId);
  if (waitingDeadlineTask) {
    const newDeadlineMatch = text.match(/^(\d{2}\.\d{2})\s+(\d{2}:\d{2})$/);
    if (!newDeadlineMatch) {
      return bot.sendMessage(chatId, "‚ùå –§–æ—Ä–º–∞—Ç –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π. –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ DD.MM HH:mm (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥: 25.12 14:30)");
    }

    const year = new Date().getFullYear();
    const fullDateStr = `${newDeadlineMatch[1]}.${year} ${newDeadlineMatch[2]}`;
    const newDeadline = moment.tz(fullDateStr, "DD.MM.YYYY HH:mm", TIMEZONE).toDate();

    if (newDeadline.toString() === 'Invalid Date') {
      return bot.sendMessage(chatId, "‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∞ –¥–∞—Ç–∞. –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ —Ñ–æ—Ä–º–∞—Ç DD.MM HH:mm");
    }

    waitingDeadlineTask.deadline = newDeadline;
    delete waitingDeadlineTask.waitingDeadlineChange;
    saveTasks();

    const deadlineStr = moment(newDeadline).tz(TIMEZONE).format("DD.MM, HH:mm");
    const notificationText = `‚ö° –î–µ–¥–ª–∞–π–Ω –∑–∞–¥–∞—á—ñ #${waitingDeadlineTask.id} –∑–º—ñ–Ω–µ–Ω–æ –Ω–∞ ${deadlineStr}`;

    // –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤–∏–∫–æ–Ω–∞–≤—Ü—é (—è–∫—â–æ –≤—ñ–Ω —î)
    if (waitingDeadlineTask.takenById && userId !== waitingDeadlineTask.takenById) {
      sendToUserOrGroup(waitingDeadlineTask.takenById, waitingDeadlineTask.chatId, notificationText);
    }

    return bot.sendMessage(chatId, `‚úÖ –î–µ–¥–ª–∞–π–Ω –æ–Ω–æ–≤–ª–µ–Ω–æ: ${deadlineStr}`);
  }

  // –û–±—Ä–æ–±–∫–∞ –Ω–æ–≤–∏—Ö –∑–∞–¥–∞—á (–≤ –≥—Ä—É–ø—ñ —Ç–∞ –ø—Ä–∏–≤–∞—Ç–Ω–æ)
  if (!text.startsWith("$") && !text.startsWith("#") && !text.startsWith("!")) return;

  const taskRegex = /^(.*)\s+(\d{2}\.\d{2})\s+(\d{2}:\d{2})$/;
  const match = text.match(taskRegex);

  let title = text;
  let deadline = null;
  
  if (match) {
    title = match[1].trim();
    const dayMonth = match[2];
    const time = match[3];
    const year = new Date().getFullYear();
    const fullDateStr = `${dayMonth}.${year} ${time}`;
    deadline = moment.tz(fullDateStr, "DD.MM.YYYY HH:mm", TIMEZONE).toDate();
    
    if (deadline.toString() === 'Invalid Date') {
      return bot.sendMessage(chatId, "‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç–∏. –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ DD.MM HH:mm");
    }
  } else {
    deadline = moment().tz(TIMEZONE).hour(18).minute(0).second(0).toDate();
  }

  // –í–∏–∑–Ω–∞—á–µ–Ω–Ω—è –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó —Ç–∞ –ø—Ä—ñ–æ—Ä–∏—Ç–µ—Ç—É
  const symbol = text[0];
  let category = "–ó–≤–∏—á–∞–π–Ω–∞", priority = "–Ω–∏–∑—å–∫–∏–π";
  if (symbol === "$") { category = "–¢–µ—Ä–º—ñ–Ω–æ–≤–∞"; priority = "–≤–∏—Å–æ–∫–∏–π"; }
  else if (symbol === "#") { category = "–ó–≤–∏—á–∞–π–Ω–∞"; priority = "—Å–µ—Ä–µ–¥–Ω—ñ–π"; }
  else if (symbol === "!") { category = "–û–ø—Ü—ñ–æ–Ω–∞–ª—å–Ω–∞"; priority = "–Ω–∏–∑—å–∫–∏–π"; }

  // –ü–æ—à—É–∫ –≤–∏–∫–æ–Ω–∞–≤—Ü—è
  let mentionedUsername = null;
  const usernameMatch = text.match(/@(\w+)/);
  if (usernameMatch) mentionedUsername = usernameMatch[1];

  // –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –∑–∞–¥–∞—á—ñ
  const task = {
    id: nextTaskId++,
    title: title.replace(/^[$#!]\s*/, "").replace(/@\w+/g, "").trim(),
    authorName: msg.from.username || msg.from.first_name,
    authorId: msg.from.id,
    status: "–ù–æ–≤–µ",
    chatId: isPrivate ? null : chatId,
    createdAt: Date.now(),
    deadline,
    reminded: false,
    category,
    priority,
    takenByName: null,
    takenById: null,
    mentionedUsername,
    remindedNotTaken: false,
    reminderMinutes: null,
    sentReminders: [],
    waitingCustomRemind: null,
    waitingDeadlineChange: null,
    pendingDeadlineChange: null,
    isPrivate: isPrivate
  };
  
  tasks.push(task);
  saveTasks();

  const deadlineStr = moment(deadline).tz(TIMEZONE).format("DD.MM, HH:mm");
  const responsibleId = mentionedUsername ? userIds[mentionedUsername] : null;

  if (isPrivate) {
    // –û–±—Ä–æ–±–∫–∞ –ø—Ä–∏–≤–∞—Ç–Ω–∏—Ö –∑–∞–¥–∞—á
    if (mentionedUsername && responsibleId) {
      // –ü—Ä–∏–≤–∞—Ç–Ω–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤–∏–∫–æ–Ω–∞–≤—Ü—é
      const privateButtons = [
        [
          { text: "üèÉ –í–∑—è—Ç–∏", callback_data: `take_${task.id}` },
          { text: "‚úÖ –í–∏–∫–æ–Ω–∞—Ç–∏", callback_data: `done_${task.id}` }
        ],
        [
          { text: "‚ùå –í—ñ–¥—Ö–∏–ª–∏—Ç–∏", callback_data: `reject_${task.id}` },
          { text: "‚è∞ –ù–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è", callback_data: `customRemind_${task.id}` }
        ],
        [
          { text: "‚úèÔ∏è –ó–º—ñ–Ω–∏—Ç–∏ –¥–µ–¥–ª–∞–π–Ω", callback_data: `changeDeadline_${task.id}` }
        ]
      ];

      safeSendMessage(
        responsibleId,
        `üìå –í–∞–º –Ω–∞–¥–∞–ª–∏ –∑–∞–≤–¥–∞–Ω–Ω—è #${task.id} –≤—ñ–¥ ${task.authorName}:\n"${task.title}"\n–ö–∞—Ç–µ–≥–æ—Ä—ñ—è: ${task.category}\n–ü—Ä—ñ–æ—Ä–∏—Ç–µ—Ç: ${task.priority}\n–î–µ–¥–ª–∞–π–Ω: ${deadlineStr}`,
        { reply_markup: { inline_keyboard: privateButtons } }
      ).then(() => {
        // –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø–æ—Å—Ç–∞–Ω–æ–≤–Ω–∏–∫—É
        const authorButtons = [
          [
            { text: "üóëÔ∏è –í–∏–¥–∞–ª–∏—Ç–∏", callback_data: `delete_${task.id}` },
            { text: "‚úèÔ∏è –ó–º—ñ–Ω–∏—Ç–∏ –¥–µ–¥–ª–∞–π–Ω", callback_data: `changeDeadline_${task.id}` }
          ]
        ];
        
        bot.sendMessage(
          chatId,
          `‚úÖ –ó–∞–¥–∞—á–∞ #${task.id} –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–∞ @${mentionedUsername}\nüìù "${task.title}"`,
          { reply_markup: { inline_keyboard: authorButtons } }
        );
      }).catch(() => {
        bot.sendMessage(chatId, `‚ùå –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á @${mentionedUsername} –Ω–µ –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω–∏–π —É –±–æ—Ç—ñ`);
        // –í–∏–¥–∞–ª—è—î–º–æ –∑–∞–¥–∞—á—É, —è–∫—â–æ –Ω–µ –≤–¥–∞–ª–æ—Å—è –≤—ñ–¥–ø—Ä–∞–≤–∏—Ç–∏
        tasks = tasks.filter(t => t.id !== task.id);
        saveTasks();
      });
    } else if (mentionedUsername && !responsibleId) {
      // –í–∏–∫–æ–Ω–∞–≤–µ—Ü—å –Ω–µ –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω–∏–π
      bot.sendMessage(chatId, `‚ùå –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á @${mentionedUsername} –Ω–µ –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω–∏–π —É –±–æ—Ç—ñ`);
      tasks = tasks.filter(t => t.id !== task.id);
      saveTasks();
    } else {
      // –ó–∞–¥–∞—á–∞ –±–µ–∑ –≤–∏–∫–æ–Ω–∞–≤—Ü—è –≤ –ø—Ä–∏–≤–∞—Ç–Ω–æ–º—É —á–∞—Ç—ñ
      const buttons = [
        [
          { text: "üóëÔ∏è –í–∏–¥–∞–ª–∏—Ç–∏", callback_data: `delete_${task.id}` },
          { text: "‚úèÔ∏è –ó–º—ñ–Ω–∏—Ç–∏ –¥–µ–¥–ª–∞–π–Ω", callback_data: `changeDeadline_${task.id}` }
        ]
      ];
      
      bot.sendMessage(
        chatId,
        `‚úÖ –ó–∞–¥–∞—á–∞ #${task.id} —Å—Ç–≤–æ—Ä–µ–Ω–∞!\n"${task.title}"\n–ö–∞—Ç–µ–≥–æ—Ä—ñ—è: ${task.category}\n–ü—Ä—ñ–æ—Ä–∏—Ç–µ—Ç: ${task.priority}\n–î–µ–¥–ª–∞–π–Ω: ${deadlineStr}`,
        { reply_markup: { inline_keyboard: buttons } }
      );
    }
  } else {
    // –û–±—Ä–æ–±–∫–∞ –∑–∞–¥–∞—á —É –≥—Ä—É–ø—ñ
    const allGroupButtons = [
      { text: "üèÉ –í–∑—è—Ç–∏", callback_data: `take_${task.id}` },
      { text: "‚úÖ –í–∏–∫–æ–Ω–∞—Ç–∏", callback_data: `done_${task.id}` },
      { text: "‚ùå –í—ñ–¥—Ö–∏–ª–∏—Ç–∏", callback_data: `reject_${task.id}` },
      { text: "üóëÔ∏è –í–∏–¥–∞–ª–∏—Ç–∏", callback_data: `delete_${task.id}` },
      { text: "‚úèÔ∏è –ó–º—ñ–Ω–∏—Ç–∏ –¥–µ–¥–ª–∞–π–Ω", callback_data: `changeDeadline_${task.id}` }
    ];
    if (responsibleId) {
      // –ü—Ä–∏–≤–∞—Ç–Ω–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤–∏–∫–æ–Ω–∞–≤—Ü—é
      const privateButtons = [
        [
          { text: "üèÉ –í–∑—è—Ç–∏", callback_data: `take_${task.id}` },
          { text: "‚úÖ –í–∏–∫–æ–Ω–∞—Ç–∏", callback_data: `done_${task.id}` }
        ],
        [
          { text: "‚ùå –í—ñ–¥—Ö–∏–ª–∏—Ç–∏", callback_data: `reject_${task.id}` },
          { text: "‚è∞ –ù–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è", callback_data: `customRemind_${task.id}` }
        ],
        [
          { text: "‚úèÔ∏è –ó–º—ñ–Ω–∏—Ç–∏ –¥–µ–¥–ª–∞–π–Ω", callback_data: `changeDeadline_${task.id}` }
        ]
      ];

      safeSendMessage(
        responsibleId,
        `üìå –í–∞–º –Ω–∞–¥–∞–ª–∏ –∑–∞–≤–¥–∞–Ω–Ω—è #${task.id} –≤—ñ–¥ ${task.authorName}:\n"${task.title}"\n–ö–∞—Ç–µ–≥–æ—Ä—ñ—è: ${task.category}\n–ü—Ä—ñ–æ—Ä–∏—Ç–µ—Ç: ${task.priority}\n–î–µ–¥–ª–∞–π–Ω: ${deadlineStr}`,
        { reply_markup: { inline_keyboard: privateButtons } }
      ).catch(() => {
        console.log(`–ù–µ –≤–¥–∞–ª–æ—Å—å –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ @${mentionedUsername}, –≤—ñ–Ω —â–µ –Ω–µ –∑–∞–ø—É—Å—Ç–∏–≤ –±–æ—Ç–∞`);
      });

      // –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤ –≥—Ä—É–ø—É
      const groupButtons = [
        [
          { text: "üóëÔ∏è –í–∏–¥–∞–ª–∏—Ç–∏", callback_data: `delete_${task.id}` },
          { text: "‚úèÔ∏è –ó–º—ñ–Ω–∏—Ç–∏ –¥–µ–¥–ª–∞–π–Ω", callback_data: `changeDeadline_${task.id}` }
        ]
      ];
      
      bot.sendMessage(
        chatId,
        `‚úÖ –ó–∞–¥–∞—á–∞ #${task.id} —Å—Ç–≤–æ—Ä–µ–Ω–∞ –¥–ª—è @${mentionedUsername}\nüìù "${task.title}"`,
        { reply_markup: { inline_keyboard: groupButtons } }
      );
    } else {
      // –ó–∞–¥–∞—á–∞ –±–µ–∑ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–æ–≥–æ –≤–∏–∫–æ–Ω–∞–≤—Ü—è
      let messageText = `‚úÖ –ó–∞–¥–∞—á–∞ #${task.id} —Å—Ç–≤–æ—Ä–µ–Ω–∞!\n"${task.title}"\n–ö–∞—Ç–µ–≥–æ—Ä—ñ—è: ${task.category}\n–ü—Ä—ñ–æ—Ä–∏—Ç–µ—Ç: ${task.priority}\n–î–µ–¥–ª–∞–π–Ω: ${deadlineStr}`;

      if (mentionedUsername) {
        messageText += `\n\n‚ö†Ô∏è @${mentionedUsername} —â–µ –Ω–µ –∑–∞–ø—É—Å—Ç–∏–≤ –±–æ—Ç–∞`;
      }

      bot.sendMessage(
        chatId, 
        messageText, 
        { reply_markup: { inline_keyboard: chunkButtons(allGroupButtons, 2) } }
      );
    }
  }
});

// ====== Inline –∫–Ω–æ–ø–∫–∏ ======
bot.on("callback_query", async (query) => {
  const chatId = query.message.chat.id;
  const messageId = query.message.message_id;
  const userId = query.from.id;
  const data = query.data;
  
  console.log('üîî Callback received:', data);
  console.log('üìã All tasks:', tasks.map(t => ({ id: t.id, title: t.title })));

  try {
    // –°–ø–æ—á–∞—Ç–∫—É –æ–±—Ä–æ–±–ª—è—î–º–æ —Å–ø–µ—Ü—ñ–∞–ª—å–Ω—ñ callback –±–µ–∑ taskId
    if (data === "stats_7days") {
      // –û–±—Ä–æ–±–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
      const chatId = query.message.chat.id;
      const isPrivate = query.message.chat.type === 'private';
      
      let userTasks;
      if (isPrivate) {
        userTasks = tasks.filter(t => 
          t.authorId === query.from.id || 
          t.takenById === query.from.id || 
          (t.mentionedUsername && userIds[t.mentionedUsername] === query.from.id)
        );
      } else {
        userTasks = tasks.filter(t => t.chatId === chatId);
      }

      const sevenDaysAgo = moment().subtract(7, 'days').valueOf();
      const lastWeekTasks = userTasks.filter(t => t.createdAt >= sevenDaysAgo);

      const incomplete = lastWeekTasks.filter(t => t.status !== "–í–∏–∫–æ–Ω–∞–Ω–æ ‚úÖ" && t.status !== "–í—ñ–¥—Ö–∏–ª–µ–Ω–æ ‚ùå");
      const completed = lastWeekTasks.filter(t => t.status === "–í–∏–∫–æ–Ω–∞–Ω–æ ‚úÖ");
      const rejected = lastWeekTasks.filter(t => t.status === "–í—ñ–¥—Ö–∏–ª–µ–Ω–æ ‚ùå");

      let text = "üìà *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ –æ—Å—Ç–∞–Ω–Ω—ñ 7 –¥–Ω—ñ–≤:*\n\n";
      text += "üìå *–ê–∫—Ç–∏–≤–Ω—ñ:* " + incomplete.length + "\n";
      text += "‚úÖ *–í–∏–∫–æ–Ω–∞–Ω—ñ:* " + completed.length + "\n";
      text += "‚ùå *–í—ñ–¥—Ö–∏–ª–µ–Ω—ñ:* " + rejected.length + "\n\n";

      if (completed.length > 0) {
        text += "üéØ *–û—Å—Ç–∞–Ω–Ω—ñ –≤–∏–∫–æ–Ω–∞–Ω—ñ:*\n";
        const recentCompleted = completed.slice(-5).reverse();
        recentCompleted.forEach(task => {
          const completedDate = moment(task.completedAt).tz(TIMEZONE).format("DD.MM HH:mm");
          text += `#${task.id} - ${task.title} (${completedDate})\n`;
        });
      }

      await bot.sendMessage(chatId, text, { parse_mode: "Markdown" });
      return bot.answerCallbackQuery(query.id, { text: "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–∞" });
    }

    // –û–±—Ä–æ–±–∫–∞ callback –∑ taskId
    const parts = data.split('_');
    console.log('Parts:', parts);
    
    let action, taskId;

    // –í–∏–∑–Ω–∞—á–∞—î–º–æ action —Ç–∞ taskId –≤ –∑–∞–ª–µ–∂–Ω–æ—Å—Ç—ñ –≤—ñ–¥ –∫—ñ–ª—å–∫–æ—Å—Ç—ñ —á–∞—Å—Ç–∏–Ω
    if (parts.length === 2) {
      // –ü—Ä–æ—Å—Ç—ñ –¥—ñ—ó: take_18, done_18, delete_18, etc.
      action = parts[0];
      taskId = parseInt(parts[1]);
    } else if (parts.length === 3) {
      // –°–∫–ª–∞–¥–Ω—ñ –¥—ñ—ó: confirm_deadline_18, reject_deadline_18
      action = parts[0] + '_' + parts[1]; // "confirm_deadline", "reject_deadline"
      taskId = parseInt(parts[2]);
    } else {
      console.log('‚ùå Invalid callback format:', data);
      return bot.answerCallbackQuery(query.id, { 
        text: "‚ùå –ü–æ–º–∏–ª–∫–∞ —Ñ–æ—Ä–º–∞—Ç—É –∑–∞–ø–∏—Ç—É",
        show_alert: true 
      });
    }
    
    console.log('üîÑ Action:', action, 'Task ID:', taskId);

    if (isNaN(taskId)) {
      console.log('‚ùå Invalid taskId from parts:', parts);
      return bot.answerCallbackQuery(query.id, { 
        text: "‚ùå –ü–æ–º–∏–ª–∫–∞: ID –∑–∞–¥–∞—á—ñ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ",
        show_alert: true 
      });
    }

    const task = tasks.find(t => t.id === taskId);
    
    if (!task) {
      console.log('‚ùå Task not found, ID:', taskId);
      console.log('üìã Available task IDs:', tasks.map(t => t.id));
      return bot.answerCallbackQuery(query.id, { 
        text: `‚ùå –ó–∞–¥–∞—á–∞ #${taskId} –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∞`,
        show_alert: true 
      });
    }

    console.log('‚úÖ Task found:', task.id, task.title);

    // –û–±—Ä–æ–±–∫–∞ –¥—ñ–π
    switch (action) {
      case "take":
        if (task.status === "–í–∏–∫–æ–Ω–∞–Ω–æ ‚úÖ") {
          return bot.answerCallbackQuery(query.id, { text: "‚ùå –ó–∞–¥–∞—á–∞ –≤–∂–µ –≤–∏–∫–æ–Ω–∞–Ω–∞", show_alert: true });
        }

        task.status = "–í–∑—è–≤—Å—è üèÉ";
        task.takenByName = query.from.username || query.from.first_name;
        task.takenById = userId;
        saveTasks();

        await bot.editMessageReplyMarkup(
          { inline_keyboard: [] },
          { chat_id: chatId, message_id: messageId }
        ).catch(() => console.log("–ù–µ –≤–¥–∞–ª–æ—Å—å –æ–Ω–æ–≤–∏—Ç–∏ markup"));

        await bot.sendMessage(chatId, `üîπ –ó–∞–¥–∞—á–∞ #${task.id} –≤–∑—è—Ç–∞ ${task.takenByName}`);

        if (task.authorId && task.authorId !== userId) {
          sendToUserOrGroup(
            task.authorId,
            task.chatId,
            `üîπ –ó–∞–¥–∞—á–∞ #${task.id} "${task.title}" –≤–∑—è—Ç–∞ ${task.takenByName}`
          );
        }
        break;

      case "customRemind":
        task.waitingCustomRemind = userId;
        saveTasks();
        await bot.sendMessage(userId, `–í–≤–µ–¥—ñ—Ç—å –∫—ñ–ª—å–∫—ñ—Å—Ç—å –≥–æ–¥–∏–Ω –¥–ª—è –Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è –ø—Ä–æ –∑–∞–¥–∞—á—É #${task.id}:`);
        break;

      case "changeDeadline":
        task.waitingDeadlineChange = userId;
        saveTasks();
        await bot.sendMessage(userId, `–í–≤–µ–¥—ñ—Ç—å –Ω–æ–≤–∏–π –¥–µ–¥–ª–∞–π–Ω –¥–ª—è –∑–∞–¥–∞—á—ñ #${task.id} (DD.MM HH:mm):`);
        break;

      case "done":
        task.status = "–í–∏–∫–æ–Ω–∞–Ω–æ ‚úÖ";
        task.completedAt = Date.now();
        saveTasks();

        await bot.editMessageReplyMarkup(
          { inline_keyboard: [] },
          { chat_id: chatId, message_id: messageId }
        ).catch(() => console.log("–ù–µ –≤–¥–∞–ª–æ—Å—å –æ–Ω–æ–≤–∏—Ç–∏ markup"));

        await bot.sendMessage(chatId, `‚úÖ –ó–∞–¥–∞—á–∞ #${task.id} –≤–∏–∫–æ–Ω–∞–Ω–∞!`);

        if (task.authorId && task.authorId !== userId) {
          sendToUserOrGroup(
            task.authorId,
            task.chatId,
            `‚úÖ –ó–∞–¥–∞—á–∞ #${task.id} "${task.title}" –≤–∏–∫–æ–Ω–∞–Ω–∞ ${task.takenByName || query.from.first_name}`
          );
        }
        break;

      case "reject":
        if (task.status === "–í–∏–∫–æ–Ω–∞–Ω–æ ‚úÖ") {
          return bot.answerCallbackQuery(query.id, { text: "‚ùå –ó–∞–¥–∞—á–∞ –≤–∂–µ –≤–∏–∫–æ–Ω–∞–Ω–∞", show_alert: true });
        }

        task.status = "–í—ñ–¥—Ö–∏–ª–µ–Ω–æ ‚ùå";
        task.rejectedBy = query.from.username || query.from.first_name;
        task.rejectedById = userId;
        saveTasks();

        await bot.editMessageReplyMarkup(
          { inline_keyboard: [] },
          { chat_id: chatId, message_id: messageId }
        ).catch(() => console.log("–ù–µ –≤–¥–∞–ª–æ—Å—å –æ–Ω–æ–≤–∏—Ç–∏ markup"));

        const rejectMessage = `‚ùå –ó–∞–¥–∞—á–∞ #${task.id} –≤—ñ–¥—Ö–∏–ª–µ–Ω–∞ ${task.rejectedBy}`;
        await bot.sendMessage(chatId, rejectMessage);

        if (task.authorId && task.authorId !== userId) {
          sendToUserOrGroup(
            task.authorId,
            task.chatId,
            `‚ùå –ó–∞–¥–∞—á–∞ #${task.id} "${task.title}" –≤—ñ–¥—Ö–∏–ª–µ–Ω–∞ ${task.rejectedBy}`
          );
        }
        break;

      case "delete":
        if (userId !== task.authorId) {
          return bot.answerCallbackQuery(query.id, {
            text: "‚õî –õ–∏—à–µ –ø–æ—Å—Ç–∞–Ω–æ–≤–Ω–∏–∫ –º–æ–∂–µ –≤–∏–¥–∞–ª—è—Ç–∏ –∑–∞–¥–∞—á—É!",
            show_alert: true
          });
        }

        tasks = tasks.filter(t => t.id !== task.id);
        saveTasks();

        await bot.deleteMessage(chatId, messageId).catch(() => console.log("–ù–µ –≤–¥–∞–ª–æ—Å—å –≤–∏–¥–∞–ª–∏—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è"));
        await bot.sendMessage(chatId, `üóëÔ∏è –ó–∞–¥–∞—á–∞ #${task.id} –≤–∏–¥–∞–ª–µ–Ω–∞`);

        if (task.takenById && task.takenById !== userId) {
          sendToUserOrGroup(
            task.takenById,
            task.chatId,
            `üóëÔ∏è –ó–∞–¥–∞—á–∞ #${task.id} "${task.title}" –≤–∏–¥–∞–ª–µ–Ω–∞ –∞–≤—Ç–æ—Ä–æ–º`
          );
        }
        break;

      case "confirm_deadline":
        console.log('üîÑ Confirm deadline for task:', task.id);
        if (userId !== task.authorId) {
          return bot.answerCallbackQuery(query.id, {
            text: "‚õî –õ–∏—à–µ –ø–æ—Å—Ç–∞–Ω–æ–≤–Ω–∏–∫ –º–æ–∂–µ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂—É–≤–∞—Ç–∏ –∑–º—ñ–Ω—É –¥–µ–¥–ª–∞–π–Ω—É!",
            show_alert: true
          });
        }

        if (!task.pendingDeadlineChange) {
          return bot.answerCallbackQuery(query.id, {
            text: "‚ùå –ü—Ä–æ–ø–æ–∑–∏—Ü—ñ—è –∑–º—ñ–Ω–∏ –¥–µ–¥–ª–∞–π–Ω—É –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∞",
            show_alert: true
          });
        }

        // –ó–∞—Å—Ç–æ—Å–æ–≤—É—î–º–æ –Ω–æ–≤–∏–π –¥–µ–¥–ª–∞–π–Ω
        const oldDeadlineStr = moment(task.deadline).tz(TIMEZONE).format("DD.MM, HH:mm");
        task.deadline = task.pendingDeadlineChange.newDeadline;
        const newDeadlineStr = moment(task.deadline).tz(TIMEZONE).format("DD.MM, HH:mm");
        
        // –û—á–∏—â–∞—î–º–æ –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω—ñ –Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è
        task.sentReminders = [];
        
        // –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤–∏–∫–æ–Ω–∞–≤—Ü—é
        const executorMessage = `‚úÖ –ü–æ—Å—Ç–∞–Ω–æ–≤–Ω–∏–∫ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∏–≤ –∑–º—ñ–Ω—É –¥–µ–¥–ª–∞–π–Ω—É –∑–∞–¥–∞—á—ñ #${task.id} "${task.title}"\n\nüïí –°—Ç–∞—Ä–∏–π –¥–µ–¥–ª–∞–π–Ω: ${oldDeadlineStr}\nüïí –ù–æ–≤–∏–π –¥–µ–¥–ª–∞–π–Ω: ${newDeadlineStr}`;
        
        sendToUserOrGroup(
          task.pendingDeadlineChange.proposedBy,
          task.chatId,
          executorMessage
        );

        // –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø–æ—Å—Ç–∞–Ω–æ–≤–Ω–∏–∫—É
        const authorMessage = `‚úÖ –í–∏ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∏–ª–∏ –∑–º—ñ–Ω—É –¥–µ–¥–ª–∞–π–Ω—É –∑–∞–¥–∞—á—ñ #${task.id}\n\nüïí –ù–æ–≤–∏–π –¥–µ–¥–ª–∞–π–Ω: ${newDeadlineStr}\nüë§ –ó–∞–ø—Ä–æ–ø–æ–Ω–æ–≤–∞–Ω–æ: ${task.pendingDeadlineChange.proposedByName}\nüìù –ü—Ä–∏—á–∏–Ω–∞: ${task.pendingDeadlineChange.reason}`;

        // –û–Ω–æ–≤–ª—é—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
        await bot.editMessageText(
          authorMessage,
          {
            chat_id: chatId,
            message_id: messageId,
            parse_mode: "Markdown"
          }
        ).catch(() => {
          bot.sendMessage(chatId, authorMessage);
        });

        // –í–∏–¥–∞–ª—è—î–º–æ –ø—Ä–æ–ø–æ–∑–∏—Ü—ñ—é
        task.pendingDeadlineChange = null;
        saveTasks();
        
        await bot.answerCallbackQuery(query.id, { text: "‚úÖ –î–µ–¥–ª–∞–π–Ω –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–æ" });
        break;

      case "reject_deadline":
        console.log('üîÑ Reject deadline for task:', task.id);
        if (userId !== task.authorId) {
          return bot.answerCallbackQuery(query.id, {
            text: "‚õî –õ–∏—à–µ –ø–æ—Å—Ç–∞–Ω–æ–≤–Ω–∏–∫ –º–æ–∂–µ –≤—ñ–¥—Ö–∏–ª—è—Ç–∏ –∑–º—ñ–Ω—É –¥–µ–¥–ª–∞–π–Ω—É!",
            show_alert: true
          });
        }

        if (!task.pendingDeadlineChange) {
          return bot.answerCallbackQuery(query.id, {
            text: "‚ùå –ü—Ä–æ–ø–æ–∑–∏—Ü—ñ—è –∑–º—ñ–Ω–∏ –¥–µ–¥–ª–∞–π–Ω—É –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∞",
            show_alert: true
          });
        }

        const currentDeadlineStr = moment(task.deadline).tz(TIMEZONE).format("DD.MM, HH:mm");
        
        // –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤–∏–∫–æ–Ω–∞–≤—Ü—é
        const rejectExecutorMessage = `‚ùå –ü–æ—Å—Ç–∞–Ω–æ–≤–Ω–∏–∫ –≤—ñ–¥—Ö–∏–ª–∏–≤ –∑–º—ñ–Ω—É –¥–µ–¥–ª–∞–π–Ω—É –∑–∞–¥–∞—á—ñ #${task.id} "${task.title}"\n\nüïí –î–µ–¥–ª–∞–π–Ω –∑–∞–ª–∏—à–∞—î—Ç—å—Å—è: ${currentDeadlineStr}`;
        
        sendToUserOrGroup(
          task.pendingDeadlineChange.proposedBy,
          task.chatId,
          rejectExecutorMessage
        );

        // –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø–æ—Å—Ç–∞–Ω–æ–≤–Ω–∏–∫–∞
        const rejectAuthorMessage = `‚ùå –í–∏ –≤—ñ–¥—Ö–∏–ª–∏–ª–∏ –∑–º—ñ–Ω—É –¥–µ–¥–ª–∞–π–Ω—É –¥–ª—è –∑–∞–¥–∞—á—ñ #${task.id}\n\nüë§ –ó–∞–ø—Ä–æ–ø–æ–Ω–æ–≤–∞–Ω–æ: ${task.pendingDeadlineChange.proposedByName}\nüìù –ü—Ä–∏—á–∏–Ω–∞: ${task.pendingDeadlineChange.reason}`;

        // –û–Ω–æ–≤–ª—é—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
        await bot.editMessageText(
          rejectAuthorMessage,
          {
            chat_id: chatId,
            message_id: messageId,
            parse_mode: "Markdown"
          }
        ).catch(() => {
          bot.sendMessage(chatId, rejectAuthorMessage);
        });

        // –í–∏–¥–∞–ª—è—î–º–æ –ø—Ä–æ–ø–æ–∑–∏—Ü—ñ—é
        task.pendingDeadlineChange = null;
        saveTasks();
        
        await bot.answerCallbackQuery(query.id, { text: "‚ùå –î–µ–¥–ª–∞–π–Ω –≤—ñ–¥—Ö–∏–ª–µ–Ω–æ" });
        break;

      default:
        console.log('‚ùå Unknown action:', action);
        await bot.answerCallbackQuery(query.id, { text: "‚ùå –ù–µ–≤—ñ–¥–æ–º–∞ –¥—ñ—è" });
        break;
    }

  } catch (error) {
    console.error("‚ùå –ü–æ–º–∏–ª–∫–∞ –æ–±—Ä–æ–±–∫–∏ callback:", error);
    await bot.answerCallbackQuery(query.id, { text: "‚ùå –ü–æ–º–∏–ª–∫–∞ –æ–±—Ä–æ–±–∫–∏ –∑–∞–ø–∏—Ç—É" });
  }
});
// ====== –ö–æ–º–∞–Ω–¥–∏ ======
// ... (–∫–æ–º–∞–Ω–¥–∏ /take, /done, /reject, /delete, /deadline –∑–∞–ª–∏—à–∞—é—Ç—å—Å—è –±–µ–∑ –∑–º—ñ–Ω)
bot.onText(/\/take (\d+)/, (msg, match) => {
  const task = tasks.find(t => t.id === parseInt(match[1]));
  if (!task) return bot.sendMessage(msg.chat.id, `‚ùå –ó–∞–¥–∞—á–∞ #${match[1]} –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∞`);
  
  if (task.status === "–í–∏–∫–æ–Ω–∞–Ω–æ ‚úÖ") {
    return bot.sendMessage(msg.chat.id, "‚ùå –ó–∞–¥–∞—á–∞ –≤–∂–µ –≤–∏–∫–æ–Ω–∞–Ω–∞");
  }
  
  task.status = "–í–∑—è–≤—Å—è üèÉ";
  task.takenByName = msg.from.username || msg.from.first_name;
  task.takenById = msg.from.id;
  saveTasks();
  
  bot.sendMessage(msg.chat.id, `üîπ –ó–∞–¥–∞—á–∞ #${task.id} –≤–∑—è—Ç–∞ ${task.takenByName}`);
  
  if (task.authorId && task.authorId !== msg.from.id) {
    safeSendMessage(
      task.authorId,
      `üîπ –ó–∞–¥–∞—á–∞ #${task.id} "${task.title}" –≤–∑—è—Ç–∞ ${task.takenByName}`
    ).catch(() => console.log("–ù–µ –≤–¥–∞–ª–æ—Å—å –ø–æ–≤—ñ–¥–æ–º–∏—Ç–∏ –∞–≤—Ç–æ—Ä–∞"));
  }
});

bot.onText(/\/done (\d+)/, (msg, match) => {
  const task = tasks.find(t => t.id === parseInt(match[1]));
  if (!task) return bot.sendMessage(msg.chat.id, `‚ùå –ó–∞–¥–∞—á–∞ #${match[1]} –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∞`);
  
  task.status = "–í–∏–∫–æ–Ω–∞–Ω–æ ‚úÖ";
  saveTasks();
  bot.sendMessage(msg.chat.id, `‚úÖ –ó–∞–¥–∞—á–∞ #${task.id} –≤–∏–∫–æ–Ω–∞–Ω–∞!`);
  
  if (task.authorId && task.authorId !== msg.from.id) {
    safeSendMessage(
      task.authorId,
      `‚úÖ –ó–∞–¥–∞—á–∞ #${task.id} "${task.title}" –≤–∏–∫–æ–Ω–∞–Ω–∞ ${task.takenByName || msg.from.first_name}`
    ).catch(() => console.log("–ù–µ –≤–¥–∞–ª–æ—Å—å –ø–æ–≤—ñ–¥–æ–º–∏—Ç–∏ –∞–≤—Ç–æ—Ä–∞"));
  }
});

bot.onText(/\/delete (\d+)/, (msg, match) => {
  const task = tasks.find(t => t.id === parseInt(match[1]));
  if (!task) return bot.sendMessage(msg.chat.id, `‚ùå –ó–∞–¥–∞—á–∞ #${match[1]} –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∞`);

  if (msg.from.id !== task.authorId) {
    return bot.sendMessage(msg.chat.id, "‚õî –õ–∏—à–µ –ø–æ—Å—Ç–∞–Ω–æ–≤–Ω–∏–∫ –º–æ–∂–µ –≤–∏–¥–∞–ª—è—Ç–∏ —Ü—é –∑–∞–¥–∞—á—É!");
  }

  tasks = tasks.filter(t => t.id !== task.id);
  saveTasks();
  bot.sendMessage(msg.chat.id, `üóëÔ∏è –ó–∞–¥–∞—á–∞ #${task.id} –≤–∏–¥–∞–ª–µ–Ω–∞`);
  
  if (task.takenById && task.takenById !== msg.from.id) {
    safeSendMessage(task.takenById, `üóëÔ∏è –ó–∞–¥–∞—á–∞ #${task.id} "${task.title}" –≤–∏–¥–∞–ª–µ–Ω–∞ –∞–≤—Ç–æ—Ä–æ–º`)
      .catch(() => console.log("–ù–µ –≤–¥–∞–ª–æ—Å—å –ø–æ–≤—ñ–¥–æ–º–∏—Ç–∏ –≤–∏–∫–æ–Ω–∞–≤—Ü—è"));
  }
});
// ====== –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –∑–º—ñ–Ω–∏ –¥–µ–¥–ª–∞–π–Ω—É —á–µ—Ä–µ–∑ —Ç–µ–∫—Å—Ç ======
bot.onText(/\/deadline (\d+) (\d{2}\.\d{2}) (\d{2}:\d{2}) (.+)/, (msg, match) => {
  const chatId = msg.chat.id;
  const userId = msg.from.id;
  const username = msg.from.username || msg.from.first_name;

  const taskId = parseInt(match[1]);
  const task = tasks.find(t => t.id === taskId);
  if (!task) return bot.sendMessage(chatId, `‚ùå –ó–∞–¥–∞—á–∞ #${taskId} –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∞`);

  const year = new Date().getFullYear();
  const fullDateStr = `${match[2]}.${year} ${match[3]}`;
  const newDeadline = moment.tz(fullDateStr, "DD.MM.YYYY HH:mm", TIMEZONE).toDate();

  if (newDeadline.toString() === "Invalid Date") {
    return bot.sendMessage(chatId, "‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∞ –¥–∞—Ç–∞. –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç DD.MM HH:mm");
  }

  const reason = match[4].trim();
  if (!reason) return bot.sendMessage(chatId, "‚ùå –í–∫–∞–∂—ñ—Ç—å –ø—Ä–∏—á–∏–Ω—É –∑–º—ñ–Ω–∏ –¥–µ–¥–ª–∞–π–Ω—É");

  // –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –ø—Ä–æ–ø–æ–∑–∏—Ü—ñ—é –∑–º—ñ–Ω–∏ –¥–µ–¥–ª–∞–π–Ω—É
  task.pendingDeadlineChange = {
    newDeadline,
    proposedBy: userId,
    proposedByName: username,
    reason
  };
  saveTasks();

  const newDeadlineStr = moment(newDeadline).tz(TIMEZONE).format("DD.MM, HH:mm");

  // –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø–æ—Å—Ç–∞–Ω–æ–≤–Ω–∏–∫—É –∑ –∫–Ω–æ–ø–∫–∞–º–∏ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏ / –≤—ñ–¥—Ö–∏–ª–∏—Ç–∏
  const text = `‚ö° –ü—Ä–æ–ø–æ–∑–∏—Ü—ñ—è –∑–º—ñ–Ω–∏ –¥–µ–¥–ª–∞–π–Ω—É –∑–∞–¥–∞—á—ñ #${task.id} "${task.title}"\n\n` +
               `üïí –ù–æ–≤–∏–π –¥–µ–¥–ª–∞–π–Ω: ${newDeadlineStr}\n` +
               `üë§ –ó–∞–ø—Ä–æ–ø–æ–Ω–æ–≤–∞–Ω–æ: ${username}\n` +
               `üìù –ü—Ä–∏—á–∏–Ω–∞: ${reason}`;

  const keyboard = {
    inline_keyboard: [
      [
        { text: "‚úÖ –ü—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏", callback_data: `confirm_deadline_${task.id}` },
        { text: "‚ùå –í—ñ–¥—Ö–∏–ª–∏—Ç–∏", callback_data: `reject_deadline_${task.id}` }
      ]
    ]
  };

  // –ù–∞–¥—Å–∏–ª–∞—î–º–æ –ø–æ—Å—Ç–∞–Ω–æ–≤–Ω–∏–∫—É (—è–∫—â–æ –≤–∏–∫–æ–Ω–∞–≤–µ—Ü—å —ñ –ø–æ—Å—Ç–∞–Ω–æ–≤–Ω–∏–∫ —Ä—ñ–∑–Ω—ñ)
  if (task.authorId && task.authorId !== userId) {
    safeSendMessage(task.authorId, text, { reply_markup: keyboard }).catch(() => console.log("–ù–µ –≤–¥–∞–ª–æ—Å—å –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ –ø–æ—Å—Ç–∞–Ω–æ–≤–Ω–∏–∫—É"));
  }

  // –ü—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –¥–ª—è –≤–∏–∫–æ–Ω–∞–≤—Ü—è
  bot.sendMessage(chatId, `‚úÖ –ü—Ä–æ–ø–æ–∑–∏—Ü—ñ—è –∑–º—ñ–Ω–∏ –¥–µ–¥–ª–∞–π–Ω—É –∑–∞–¥–∞—á—ñ #${task.id} –Ω–∞ ${newDeadlineStr} –Ω–∞–¥—ñ—Å–ª–∞–Ω–∞ –ø–æ—Å—Ç–∞–Ω–æ–≤–Ω–∏–∫—É`);
});


bot.onText(/\/tasks$/, (msg) => {
  const chatId = msg.chat.id;
  const isPrivate = msg.chat.type === 'private';
  
  let userTasks;
  if (isPrivate) {
    userTasks = tasks.filter(t => 
      t.authorId === msg.from.id || 
      t.takenById === msg.from.id || 
      (t.mentionedUsername && userIds[t.mentionedUsername] === msg.from.id)
    );
  } else {
    userTasks = tasks.filter(t => t.chatId === chatId);
  }
  
  if (userTasks.length === 0) return bot.sendMessage(chatId, "üì≠ –ó–∞–¥–∞—á –ø–æ–∫–∏ –Ω–µ–º–∞—î");

  const activeTasks = userTasks.filter(t => t.status !== "–í–∏–∫–æ–Ω–∞–Ω–æ ‚úÖ" && t.status !== "–í—ñ–¥—Ö–∏–ª–µ–Ω–æ ‚ùå");
  if (activeTasks.length === 0) return bot.sendMessage(chatId, "‚úÖ –í—Å—ñ –∑–∞–¥–∞—á—ñ –≤–∏–∫–æ–Ω–∞–Ω—ñ!");

  activeTasks.forEach(task => {
    const deadlineStr = task.deadline ? moment(task.deadline).tz(TIMEZONE).format("DD.MM, HH:mm") : "–Ω–µ –≤–∫–∞–∑–∞–Ω–æ";
    const responsible = task.takenByName || (task.mentionedUsername ? `@${task.mentionedUsername}` : "–Ω–µ –ø—Ä–∏–∑–Ω–∞—á–µ–Ω–æ");

    const buttons = [
      { text: "üèÉ –í–∑—è—Ç–∏", callback_data: `take_${task.id}` },
      { text: "‚úÖ –í–∏–∫–æ–Ω–∞—Ç–∏", callback_data: `done_${task.id}` },
      { text: "‚ùå –í—ñ–¥—Ö–∏–ª–∏—Ç–∏", callback_data: `reject_${task.id}` },
      { text: "üóëÔ∏è –í–∏–¥–∞–ª–∏—Ç–∏", callback_data: `delete_${task.id}` },
      { text: "‚úèÔ∏è –ó–º—ñ–Ω–∏—Ç–∏ –¥–µ–¥–ª–∞–π–Ω", callback_data: `changeDeadline_${task.id}` }
    ];

    bot.sendMessage(
      chatId,
      `#${task.id} - ${task.title}\n–°—Ç–∞—Ç—É—Å: ${task.status}\n–í—ñ–¥–ø–æ–≤—ñ–¥–∞–ª—å–Ω–∏–π: ${responsible}\n–î–µ–¥–ª–∞–π–Ω: ${deadlineStr}`,
      { reply_markup: { inline_keyboard: chunkButtons(buttons, 3) } }
    );
  });
});

bot.onText(/\/tasks_status/, (msg) => {
  const chatId = msg.chat.id;
  const isPrivate = msg.chat.type === 'private';
  
  let userTasks;
  if (isPrivate) {
    userTasks = tasks.filter(t => 
      t.authorId === msg.from.id || 
      t.takenById === msg.from.id || 
      (t.mentionedUsername && userIds[t.mentionedUsername] === msg.from.id)
    );
  } else {
    userTasks = tasks.filter(t => t.chatId === chatId);
  }
  
  if (userTasks.length === 0) return bot.sendMessage(chatId, "üì≠ –ó–∞–¥–∞—á –ø–æ–∫–∏ –Ω–µ–º–∞—î");

  const oneMonthAgo = moment().subtract(1, 'month').valueOf();
  const lastMonthTasks = userTasks.filter(t => t.createdAt >= oneMonthAgo);

  const incomplete = lastMonthTasks.filter(t => t.status !== "–í–∏–∫–æ–Ω–∞–Ω–æ ‚úÖ" && t.status !== "–í—ñ–¥—Ö–∏–ª–µ–Ω–æ ‚ùå");
  const completed = lastMonthTasks.filter(t => t.status === "–í–∏–∫–æ–Ω–∞–Ω–æ ‚úÖ");
  const rejected = lastMonthTasks.filter(t => t.status === "–í—ñ–¥—Ö–∏–ª–µ–Ω–æ ‚ùå");

  let text = "üìä *–°—Ç–∞—Ç—É—Å –∑–∞–¥–∞—á (–æ—Å—Ç–∞–Ω–Ω—ñ–π –º—ñ—Å—è—Ü—å):*\n\n";
  text += "üìå *–ê–∫—Ç–∏–≤–Ω—ñ:*\n";
  text += incomplete.length === 0 ? "_–Ω–µ–º–∞—î_\n" : 
    incomplete.map(t => `#${t.id} - ${t.title} (${t.status})`).join('\n');
  
  text += "\n\n‚úÖ *–í–∏–∫–æ–Ω–∞–Ω—ñ:*\n";
  text += completed.length === 0 ? "_–Ω–µ–º–∞—î_\n" : 
    completed.map(t => `#${t.id} - ${t.title}`).join('\n');

  text += "\n\n‚ùå *–í—ñ–¥—Ö–∏–ª–µ–Ω—ñ:*\n";
  text += rejected.length === 0 ? "_–Ω–µ–º–∞—î_\n" : 
    rejected.map(t => `#${t.id} - ${t.title}`).join('\n');

  const buttons = [
    [{ text: "üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ 7 –¥–Ω—ñ–≤", callback_data: "stats_7days" }]
  ];

  bot.sendMessage(chatId, text, { parse_mode: "Markdown", reply_markup: { inline_keyboard: buttons } });
});
bot.onText(/\/hide/, (msg) => {
  bot.sendMessage(msg.chat.id, "‚å®Ô∏è –ö–ª–∞–≤—ñ–∞—Ç—É—Ä–∞ –ø—Ä–∏—Ö–æ–≤–∞–Ω–∞. –©–æ–± –ø–æ–≤–µ—Ä–Ω—É—Ç–∏, –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ /keyboard", { 
    reply_markup: { remove_keyboard: true } 
  });
});
bot.onText(/\/keyboard/, (msg) => {
  bot.sendMessage(msg.chat.id, "‚å®Ô∏è –ö–ª–∞–≤—ñ–∞—Ç—É—Ä–∞ –∞–∫—Ç–∏–≤–æ–≤–∞–Ω–∞! –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è —à–≤–∏–¥–∫–æ–≥–æ –¥–æ—Å—Ç—É–ø—É –¥–æ –∫–æ–º–∞–Ω–¥.", { 
    reply_markup: createInputKeyboard() 
  });
});
bot.onText(/\/help/, (msg) => {
  bot.sendMessage(msg.chat.id, `üìù –Ü–Ω—Å—Ç—Ä—É–∫—Ü—ñ—è:

–°—Ç–≤–æ—Ä–µ–Ω–Ω—è –∑–∞–¥–∞—á:
$ –ó–∞–¥–∞—á–∞ 25.12 14:30 @username - —Ç–µ—Ä–º—ñ–Ω–æ–≤–∞
# –ó–∞–¥–∞—á–∞ 25.12 14:30 @username - –∑–≤–∏—á–∞–π–Ω–∞
! –ó–∞–¥–∞—á–∞ 25.12 14:30 @username - –æ–ø—Ü—ñ–æ–Ω–∞–ª—å–Ω–∞

–ö–æ–º–∞–Ω–¥–∏:
/take N - –≤–∑—è—Ç–∏ –∑–∞–¥–∞—á—É
/done N - –∑–∞–≤–µ—Ä—à–∏—Ç–∏ –∑–∞–¥–∞—á—É  
/delete N - –≤–∏–¥–∞–ª–∏—Ç–∏ –∑–∞–¥–∞—á—É
/reject N - –≤—ñ–¥—Ö–∏–ª–∏—Ç–∏ –∑–∞–¥–∞—á—É
/deadline N DD.MM HH:mm [–ø—Ä–∏—á–∏–Ω–∞] - –∑–º—ñ–Ω–∏—Ç–∏ –¥–µ–¥–ª–∞–π–Ω –∑–∞–¥–∞—á—ñ (–Ω–µ–æ–±–æ–≤'—è–∑–∫–æ–≤–æ –≤–∫–∞–∑—É–≤–∞—Ç–∏ –ø—Ä–∏—á–∏–Ω—É)
/confirm_deadline N - –ø—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏ –∑–º—ñ–Ω—É –¥–µ–¥–ª–∞–π–Ω—É
/reject_deadline N - –≤—ñ–¥—Ö–∏–ª–∏—Ç–∏ –∑–º—ñ–Ω—É –¥–µ–¥–ª–∞–π–Ω—É
/tasks - —Å–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω–∏—Ö –∑–∞–¥–∞—á
/tasks_status - —Å—Ç–∞—Ç—É—Å –≤—Å—ñ—Ö –∑–∞–¥–∞—á
/keyboard - –∞–∫—Ç–∏–≤—É–≤–∞—Ç–∏ –∫–ª–∞–≤—ñ–∞—Ç—É—Ä—É
/hide - –ø—Ä–∏—Ö–æ–≤–∞—Ç–∏ –∫–ª–∞–≤—ñ–∞—Ç—É—Ä—É

–ü—Ä–∏–∫–ª–∞–¥ –∑–º—ñ–Ω–∏ –¥–µ–¥–ª–∞–π–Ω—É:
/deadline 18 05.10 15:30 –¢–µ—Ä–º—ñ–Ω–æ–≤–∞ –∑–º—ñ–Ω–∞ —á–µ—Ä–µ–∑ —É—Ç–æ—á–Ω–µ–Ω–Ω—è –≤–∏–º–æ–≥

‚ùó –ü–æ–ø–µ—Ä–µ–¥–∂–µ–Ω–Ω—è:
‚Ä¢ –ö–æ–º–∞–Ω–¥–∏ /take, /done, /delete, /reject, /deadline –≤—ñ–¥—Ä–∞–∑—É –≤—ñ–¥–ø—Ä–∞–≤–ª—è—é—Ç—å—Å—è –±–æ—Ç—É –ø—Ä–∏ –≤–∏–±–æ—Ä—ñ –∑ –º–µ–Ω—é Telegram —ñ —Ç–æ–º—É –Ω–µ–º–∞—î –Ω–∞ –∑–≤–∏—á–∞–π–Ω—ñ–π –∫–ª–∞–≤—ñ–∞—Ç—É—Ä—ñ –ø—ñ–¥ –ø–æ–ª–µ–º –≤–≤–æ–¥—É. –î–ª—è –≤–∏–∫–æ–Ω–∞–Ω–Ω—è —Ü–∏—Ö –∫–æ–º–∞–Ω–¥ –ø–æ—Ç—Ä—ñ–±–Ω–æ —â–µ –¥–æ–¥–∞–≤–∞—Ç–∏ –Ω–æ–º–µ—Ä –∑–∞–¥–∞—á—ñ N.
‚Ä¢ –Ø–∫—â–æ –ø—Ä–∞—Ü—é—î—Ç–µ —É –≥—Ä—É–ø–∞—Ö —ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –Ω–µ –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω–∏–π —É –±–æ—Ç—ñ, –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ –∑–∞–≤–¥–∞–Ω–Ω—è–º –Ω–∞–¥—Å–∏–ª–∞—î—Ç—å—Å—è –≤ –≥—Ä—É–ø—É.  
‚Ä¢ –Ø–∫—â–æ –≤–∏–∫–æ–Ω–∞–≤–µ—Ü—å –Ω–∞—Ç–∏—Å–Ω—É–≤ "–í–∑—è—Ç–∏ –∑–∞–¥–∞—á—É", —ñ–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∏ –∑–Ω–∏–∫–∞—é—Ç—å.  
  –î–ª—è –≤–∑–∞—î–º–æ–¥—ñ—ó –∑ –∑–∞–≤–¥–∞–Ω–Ω—è–º –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ /tasks –∞–±–æ –≤–≤–µ–¥—ñ—Ç—å –∫–æ–º–∞–Ω–¥—É –≤—Ä—É—á–Ω—É.

–ö–Ω–æ–ø–∫–∏:
üèÉ - –≤–∑—è—Ç–∏ –∑–∞–¥–∞—á—É
‚úÖ - –≤–∏–∫–æ–Ω–∞—Ç–∏ –∑–∞–¥–∞—á—É
‚ùå - –≤—ñ–¥—Ö–∏–ª–∏—Ç–∏ –∑–∞–¥–∞—á—É
üóëÔ∏è - –≤–∏–¥–∞–ª–∏—Ç–∏ –∑–∞–¥–∞—á—É
‚úèÔ∏è - –∑–º—ñ–Ω–∏—Ç–∏ –¥–µ–¥–ª–∞–π–Ω
‚è∞ - –Ω–∞–ª–∞—à—Ç—É–≤–∞—Ç–∏ –Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è

üÜï –ù–æ–≤—ñ —Ñ—É–Ω–∫—Ü—ñ—ó:
‚Ä¢ –ó–∞–¥–∞—á—ñ –º–æ–∂–Ω–∞ —Å—Ç–≤–æ—Ä—é–≤–∞—Ç–∏ –≤ –ø—Ä–∏–≤–∞—Ç–Ω–æ–º—É —á–∞—Ç—ñ –∑ –±–æ—Ç–æ–º
‚Ä¢ –í–∏–∫–æ–Ω–∞–≤–µ—Ü—å –º–æ–∂–µ –∑–∞–ø—Ä–æ–ø–æ–Ω—É–≤–∞—Ç–∏ –∑–º—ñ–Ω—É –¥–µ–¥–ª–∞–π–Ω—É
‚Ä¢ –î–æ–¥–∞–Ω–∞ –∫–Ω–æ–ø–∫–∞ "–í—ñ–¥—Ö–∏–ª–∏—Ç–∏" –¥–ª—è –≤—ñ–¥–º–æ–≤–∏ –≤—ñ–¥ –∑–∞–¥–∞—á—ñ
‚Ä¢ –©–æ–¥–µ–Ω–Ω—ñ –∑–≤—ñ—Ç–∏ –Ω–∞–¥—Å–∏–ª–∞—é—Ç—å—Å—è —É –≥—Ä—É–ø—É –æ 18:00 (—è–∫—â–æ –∑–∞–¥–∞—á—ñ –≥—Ä—É–ø–æ–≤—ñ) –∞–±–æ –ø–æ—Å—Ç–∞–Ω–æ–≤–Ω–∏–∫—É, —è–∫—â–æ –∑–∞–¥–∞—á—ñ –ø—Ä–∏–≤–∞—Ç–Ω—ñ
‚Ä¢ –¢–µ—Ä–º—ñ–Ω–æ–≤—ñ –∑–∞–¥–∞—á—ñ ($) - —â–æ–¥–µ–Ω–Ω—ñ –Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è –æ 9:30 —Ç–∞ 10:30
‚Ä¢ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ –æ—Å—Ç–∞–Ω–Ω—ñ 7 –¥–Ω—ñ–≤

üìå –ù–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è –∑–∞ –ø—Ä—ñ–æ—Ä–∏—Ç–µ—Ç–æ–º:

üî¥ –í–∏—Å–æ–∫–∏–π –ø—Ä—ñ–æ—Ä–∏—Ç–µ—Ç ($)
* –ó–∞ 4 –¥–Ω—ñ (96 –≥–æ–¥–∏–Ω)
* –ó–∞ 3 –¥–Ω—ñ (72 –≥–æ–¥–∏–Ω–∏)
* –ó–∞ 24 –≥–æ–¥–∏–Ω–∏
* –ó–∞ 12 –≥–æ–¥–∏–Ω
* –ó–∞ 6 –≥–æ–¥–∏–Ω
* –ó–∞ 2 –≥–æ–¥–∏–Ω–∏
* –ó–∞ 1 –≥–æ–¥–∏–Ω—É

üü° –°–µ—Ä–µ–¥–Ω—ñ–π –ø—Ä—ñ–æ—Ä–∏—Ç–µ—Ç (#)
* –ó–∞ 2 –¥–æ–±–∏ (48 –≥–æ–¥–∏–Ω)
* –ó–∞ 24 –≥–æ–¥–∏–Ω–∏
* –ó–∞ 12 –≥–æ–¥–∏–Ω
* –ó–∞ 6 –≥–æ–¥–∏–Ω
* –ó–∞ 2 –≥–æ–¥–∏–Ω–∏

üü¢ –ù–∏–∑—å–∫–∏–π –ø—Ä—ñ–æ—Ä–∏—Ç–µ—Ç (!)
* –ó–∞ 1 –¥–æ–±—É (24 –≥–æ–¥–∏–Ω–∏)
* –ó–∞ 4‚Äì5 –≥–æ–¥–∏–Ω
`);
});


// ====== –ù–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è ======
// ====== –ü–æ–∫—Ä–∞—â–µ–Ω–∞ —Å–∏—Å—Ç–µ–º–∞ –Ω–∞–≥–∞–¥—É–≤–∞–Ω—å ======
// setInterval(() => {
//   const now = moment().tz(TIMEZONE);

//   tasks.forEach(task => {
//     // –ü—Ä–æ–ø—É—Å–∫–∞—î–º–æ –≤–∏–∫–æ–Ω–∞–Ω—ñ/–≤—ñ–¥—Ö–∏–ª–µ–Ω—ñ –∑–∞–¥–∞—á—ñ –∞–±–æ –∑–∞–¥–∞—á—ñ –±–µ–∑ –¥–µ–¥–ª–∞–π–Ω—É
//     if (!task.deadline || task.status === "–í–∏–∫–æ–Ω–∞–Ω–æ ‚úÖ" || task.status === "–í—ñ–¥—Ö–∏–ª–µ–Ω–æ ‚ùå") return;

//     const diffMinutes = moment(task.deadline).diff(now, "minutes");
//     if (diffMinutes <= 0) return;

//     const diffHours = diffMinutes / 60;
//     const diffDays = diffHours / 24;
    
//     task.sentReminders = task.sentReminders || [];

//     // –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ –Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è
//     const sendReminder = (timeText, reminderKey) => {
//       if (task.sentReminders.includes(reminderKey)) return;

//       const text = `‚è∞ –ù–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è! –ó–∞–¥–∞—á–∞ #${task.id} "${task.title}"\n–î–µ–¥–ª–∞–π–Ω —á–µ—Ä–µ–∑ ${timeText}`;
//       let buttons = [];
//       if (task.takenById) {
//         buttons = [[{ text: "‚úÖ –í–∏–∫–æ–Ω–∞–Ω–æ", callback_data: `done_${task.id}` }]];
//       } else {
//         buttons = [[
//           { text: "üèÉ –í–∑—è—Ç–∏", callback_data: `take_${task.id}` },
//           { text: "‚úÖ –í–∏–∫–æ–Ω–∞–Ω–æ", callback_data: `done_${task.id}` }
//         ]];
//       }

//       let sent = false;

//       // 1Ô∏è‚É£ –°–ø–æ—á–∞—Ç–∫—É –≤—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –≤–∏–∫–æ–Ω–∞–≤—Ü—é (—è–∫—â–æ –≤–∑—è–≤ –∑–∞–¥–∞—á—É)
//       if (task.takenById) {
//         safeSendMessage(task.takenById, text, { reply_markup: { inline_keyboard: buttons } })
//           .then(() => sent = true)
//           .catch(() => {});
//       }
//       // 2Ô∏è‚É£ –Ø–∫—â–æ –ø—Ä–∏–∑–Ω–∞—á–µ–Ω–∏–π —á–µ—Ä–µ–∑ username
//       else if (task.mentionedUsername) {
//         const mentionedId = userIds[task.mentionedUsername];
//         if (mentionedId) {
//           safeSendMessage(mentionedId, text, { reply_markup: { inline_keyboard: buttons } })
//             .then(() => sent = true)
//             .catch(() => {});
//         }
//       }

//       // 3Ô∏è‚É£ Fallback —É –≥—Ä—É–ø—É –∞–±–æ –∞–≤—Ç–æ—Ä—É (–¥–ª—è –ø—Ä–∏–≤–∞—Ç–Ω–∏—Ö –∑–∞–¥–∞—á)
//       setTimeout(() => {
//         if (!sent) {
//           if (task.chatId && !task.isPrivate) {
//             safeSendMessage(task.chatId, text, { reply_markup: { inline_keyboard: buttons } });
//           } else if (task.isPrivate && task.authorId) {
//             safeSendMessage(task.authorId, text, { reply_markup: { inline_keyboard: buttons } });
//           }
//         }
//       }, 500);

//       task.sentReminders.push(reminderKey);
//     };

//     // üìå –¢–µ—Ä–º—ñ–Ω–æ–≤–∞ –∑–∞–¥–∞—á–∞ ($) - –≤–∏—Å–æ–∫–∏–π –ø—Ä—ñ–æ—Ä–∏—Ç–µ—Ç
//     if (task.priority === "–≤–∏—Å–æ–∫–∏–π") {
//       // –ó–∞ 4 –¥–Ω—ñ (96 –≥–æ–¥–∏–Ω)
//       if (diffHours <= 96 && diffHours > 95) {
//         sendReminder("4 –¥–Ω—ñ", "4days");
//       }
//       // –ó–∞ 3 –¥–Ω—ñ (72 –≥–æ–¥–∏–Ω–∏)
//       if (diffHours <= 72 && diffHours > 71) {
//         sendReminder("3 –¥–Ω—ñ", "3days");
//       }
//       // –ó–∞ 24 –≥–æ–¥–∏–Ω–∏
//       if (diffHours <= 24 && diffHours > 23) {
//         sendReminder("24 –≥–æ–¥–∏–Ω–∏", "24h");
//       }
//       // –ó–∞ 12 –≥–æ–¥–∏–Ω
//       if (diffHours <= 12 && diffHours > 11) {
//         sendReminder("12 –≥–æ–¥–∏–Ω", "12h");
//       }
//       // –ó–∞ 6 –≥–æ–¥–∏–Ω
//       if (diffHours <= 6 && diffHours > 5) {
//         sendReminder("6 –≥–æ–¥–∏–Ω", "6h");
//       }
//       // –ó–∞ 2 –≥–æ–¥–∏–Ω–∏
//       if (diffHours <= 2 && diffHours > 1) {
//         sendReminder("2 –≥–æ–¥–∏–Ω–∏", "2h");
//       }
//       // –ó–∞ 1 –≥–æ–¥–∏–Ω—É
//       if (diffHours <= 1 && diffHours > 0.5) {
//         sendReminder("1 –≥–æ–¥–∏–Ω—É", "1h");
//       }
//     }

//     // üìå –ó–≤–∏—á–∞–π–Ω–∞ –∑–∞–¥–∞—á–∞ (#) - —Å–µ—Ä–µ–¥–Ω—ñ–π –ø—Ä—ñ–æ—Ä–∏—Ç–µ—Ç
//     else if (task.priority === "—Å–µ—Ä–µ–¥–Ω—ñ–π") {
//       // –ó–∞ 2 –¥–æ–±–∏ (48 –≥–æ–¥–∏–Ω)
//       if (diffHours <= 48 && diffHours > 47) {
//         sendReminder("2 –¥–æ–±–∏", "2days");
//       }
//       // –ó–∞ 24 –≥–æ–¥–∏–Ω–∏
//       if (diffHours <= 24 && diffHours > 23) {
//         sendReminder("24 –≥–æ–¥–∏–Ω–∏", "24h");
//       }
//       // –ó–∞ 12 –≥–æ–¥–∏–Ω
//       if (diffHours <= 12 && diffHours > 11) {
//         sendReminder("12 –≥–æ–¥–∏–Ω", "12h");
//       }
//       // –ó–∞ 6 –≥–æ–¥–∏–Ω
//       if (diffHours <= 6 && diffHours > 5) {
//         sendReminder("6 –≥–æ–¥–∏–Ω", "6h");
//       }
//       // –ó–∞ 2 –≥–æ–¥–∏–Ω–∏
//       if (diffHours <= 2 && diffHours > 1) {
//         sendReminder("2 –≥–æ–¥–∏–Ω–∏", "2h");
//       }
//     }

//     // üìå –û–ø—Ü—ñ–æ–Ω–∞–ª—å–Ω–∞ –∑–∞–¥–∞—á–∞ (!) - –Ω–∏–∑—å–∫–∏–π –ø—Ä—ñ–æ—Ä–∏—Ç–µ—Ç
//     else if (task.priority === "–Ω–∏–∑—å–∫–∏–π") {
//       // –ó–∞ 1 –¥–æ–±—É (24 –≥–æ–¥–∏–Ω–∏)
//       if (diffHours <= 24 && diffHours > 23) {
//         sendReminder("1 –¥–æ–±—É", "24h");
//       }
//       // –ó–∞ 4-5 –≥–æ–¥–∏–Ω
//       if (diffHours <= 5 && diffHours > 4) {
//         sendReminder("4-5 –≥–æ–¥–∏–Ω", "4-5h");
//       }
//     }

//     // –ù–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è –ø—Ä–æ –Ω–µ–≤–∑—è—Ç—ñ –∑–∞–¥–∞—á—ñ (—á–µ—Ä–µ–∑ –ø–µ–≤–Ω–∏–π —á–∞—Å –ø—ñ—Å–ª—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è)
//     if (!task.takenById && !task.remindedNotTaken) {
//       const hoursSinceCreation = (now - moment(task.createdAt)) / (1000 * 60 * 60);
//       const maxWait = { –≤–∏—Å–æ–∫–∏–π: 2, —Å–µ—Ä–µ–¥–Ω—ñ–π: 3, –Ω–∏–∑—å–∫–∏–π: 4 }[task.priority] || 3;

//       if (hoursSinceCreation >= maxWait) {
//         const text = `‚ö†Ô∏è –ó–∞–¥–∞—á–∞ #${task.id} "${task.title}" —â–µ –Ω–µ –≤–∑—è—Ç–∞!\n–ü—Ä–∏–∑–Ω–∞—á–µ–Ω–∞: ${task.mentionedUsername ? `@${task.mentionedUsername}` : '–Ω–µ –ø—Ä–∏–∑–Ω–∞—á–µ–Ω–æ'}`;

//         if (task.chatId && !task.isPrivate) {
//           safeSendMessage(task.chatId, text);
//         } else if (task.isPrivate && task.authorId) {
//           safeSendMessage(task.authorId, text);
//         }

//         task.remindedNotTaken = true;
//       }
//     }
//   });

//   saveTasks();
// }, 60 * 1000); // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —â–æ—Ö–≤–∏–ª–∏–Ω–∏
// ====== –ü–æ–∫—Ä–∞—â–µ–Ω–∞ —Å–∏—Å—Ç–µ–º–∞ –Ω–∞–≥–∞–¥—É–≤–∞–Ω—å –∑ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è–º–∏ –¥–ª—è –ø–æ—Å—Ç–∞–Ω–æ–≤–Ω–∏–∫–∞ ======
setInterval(() => {
  const now = moment().tz(TIMEZONE);

  tasks.forEach(task => {
    // –ü—Ä–æ–ø—É—Å–∫–∞—î–º–æ –≤–∏–∫–æ–Ω–∞–Ω—ñ/–≤—ñ–¥—Ö—ñ–ª–µ–Ω—ñ –∑–∞–¥–∞—á—ñ –∞–±–æ –∑–∞–¥–∞—á—ñ –±–µ–∑ –¥–µ–¥–ª–∞–π–Ω—É
    if (!task.deadline || task.status === "–í–∏–∫–æ–Ω–∞–Ω–æ ‚úÖ" || task.status === "–í—ñ–¥—Ö–∏–ª–µ–Ω–æ ‚ùå") return;

    const diffMinutes = moment(task.deadline).diff(now, "minutes");
    if (diffMinutes <= 0) return;

    const diffHours = diffMinutes / 60;
    const diffDays = diffHours / 24;
    
    task.sentReminders = task.sentReminders || [];

    // –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ –Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è
    const sendReminder = (timeText, reminderKey) => {
      if (task.sentReminders.includes(reminderKey)) return;

      const text = `‚è∞ –ù–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è! –ó–∞–¥–∞—á–∞ #${task.id} "${task.title}"\n–î–µ–¥–ª–∞–π–Ω —á–µ—Ä–µ–∑ ${timeText}`;
      let buttons = [];
      if (task.takenById) {
        buttons = [[{ text: "‚úÖ –í–∏–∫–æ–Ω–∞–Ω–æ", callback_data: `done_${task.id}` }]];
      } else {
        buttons = [[
          { text: "üèÉ –í–∑—è—Ç–∏", callback_data: `take_${task.id}` },
          { text: "‚úÖ –í–∏–∫–æ–Ω–∞–Ω–æ", callback_data: `done_${task.id}` }
        ]];
      }

      let sent = false;
      let executorName = null;

      // 1Ô∏è‚É£ –°–ø–æ—á–∞—Ç–∫—É –≤—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –≤–∏–∫–æ–Ω–∞–≤—Ü—é (—è–∫—â–æ –≤–∑—è–≤ –∑–∞–¥–∞—á—É)
      if (task.takenById) {
        executorName = task.takenByName || "–≤–∏–∫–æ–Ω–∞–≤–µ—Ü—å";
        safeSendMessage(task.takenById, text, { reply_markup: { inline_keyboard: buttons } })
          .then(() => sent = true)
          .catch(() => {});
      }
      // 2Ô∏è‚É£ –Ø–∫—â–æ –ø—Ä–∏–∑–Ω–∞—á–µ–Ω–∏–π —á–µ—Ä–µ–∑ username
      else if (task.mentionedUsername) {
        executorName = `@${task.mentionedUsername}`;
        const mentionedId = userIds[task.mentionedUsername];
        if (mentionedId) {
          safeSendMessage(mentionedId, text, { reply_markup: { inline_keyboard: buttons } })
            .then(() => sent = true)
            .catch(() => {});
        }
      }

      // 3Ô∏è‚É£ Fallback —É –≥—Ä—É–ø—É –∞–±–æ –∞–≤—Ç–æ—Ä—É (–¥–ª—è –ø—Ä–∏–≤–∞—Ç–Ω–∏—Ö –∑–∞–¥–∞—á)
      setTimeout(() => {
        if (!sent) {
          if (task.chatId && !task.isPrivate) {
            safeSendMessage(task.chatId, text, { reply_markup: { inline_keyboard: buttons } });
          } else if (task.isPrivate && task.authorId) {
            safeSendMessage(task.authorId, text, { reply_markup: { inline_keyboard: buttons } });
          }
        }

        // üì¨ –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø–æ—Å—Ç–∞–Ω–æ–≤–Ω–∏–∫—É –ø—Ä–æ –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–µ –Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è
        if (task.authorId && executorName) {
          const authorNotification = `üì¨ –ù–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ ${executorName} –ø—Ä–æ –∑–∞–¥–∞—á—É #${task.id} "${task.title}"\n‚è∞ –î–æ –¥–µ–¥–ª–∞–π–Ω—É –∑–∞–ª–∏—à–∏–ª–æ—Å—å: ${timeText}`;
          
          safeSendMessage(task.authorId, authorNotification)
            .catch(() => console.log(`–ù–µ –≤–¥–∞–ª–æ—Å—å –ø–æ–≤—ñ–¥–æ–º–∏—Ç–∏ –∞–≤—Ç–æ—Ä–∞ –ø—Ä–æ –Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è –¥–ª—è –∑–∞–¥–∞—á—ñ #${task.id}`));
        }
      }, 500);

      task.sentReminders.push(reminderKey);
    };

    // üìå –¢–µ—Ä–º—ñ–Ω–æ–≤–∞ –∑–∞–¥–∞—á–∞ ($) - –≤–∏—Å–æ–∫–∏–π –ø—Ä—ñ–æ—Ä–∏—Ç–µ—Ç
    if (task.priority === "–≤–∏—Å–æ–∫–∏–π") {
      if (diffHours <= 96 && diffHours > 95) {
        sendReminder("4 –¥–Ω—ñ", "4days");
      }
      if (diffHours <= 72 && diffHours > 71) {
        sendReminder("3 –¥–Ω—ñ", "3days");
      }
      if (diffHours <= 24 && diffHours > 23) {
        sendReminder("24 –≥–æ–¥–∏–Ω–∏", "24h");
      }
      if (diffHours <= 12 && diffHours > 11) {
        sendReminder("12 –≥–æ–¥–∏–Ω", "12h");
      }
      if (diffHours <= 6 && diffHours > 5) {
        sendReminder("6 –≥–æ–¥–∏–Ω", "6h");
      }
      if (diffHours <= 2 && diffHours > 1) {
        sendReminder("2 –≥–æ–¥–∏–Ω–∏", "2h");
      }
      if (diffHours <= 1 && diffHours > 0.5) {
        sendReminder("1 –≥–æ–¥–∏–Ω—É", "1h");
      }
    }

    // üìå –ó–≤–∏—á–∞–π–Ω–∞ –∑–∞–¥–∞—á–∞ (#) - —Å–µ—Ä–µ–¥–Ω—ñ–π –ø—Ä—ñ–æ—Ä–∏—Ç–µ—Ç
    else if (task.priority === "—Å–µ—Ä–µ–¥–Ω—ñ–π") {
      if (diffHours <= 48 && diffHours > 47) {
        sendReminder("2 –¥–æ–±–∏", "2days");
      }
      if (diffHours <= 24 && diffHours > 23) {
        sendReminder("24 –≥–æ–¥–∏–Ω–∏", "24h");
      }
      if (diffHours <= 12 && diffHours > 11) {
        sendReminder("12 –≥–æ–¥–∏–Ω", "12h");
      }
      if (diffHours <= 6 && diffHours > 5) {
        sendReminder("6 –≥–æ–¥–∏–Ω", "6h");
      }
      if (diffHours <= 2 && diffHours > 1) {
        sendReminder("2 –≥–æ–¥–∏–Ω–∏", "2h");
      }
    }

    // üìå –û–ø—Ü—ñ–æ–Ω–∞–ª—å–Ω–∞ –∑–∞–¥–∞—á–∞ (!) - –Ω–∏–∑—å–∫–∏–π –ø—Ä—ñ–æ—Ä–∏—Ç–µ—Ç
    else if (task.priority === "–Ω–∏–∑—å–∫–∏–π") {
      if (diffHours <= 24 && diffHours > 23) {
        sendReminder("1 –¥–æ–±—É", "24h");
      }
      if (diffHours <= 5 && diffHours > 4) {
        sendReminder("4-5 –≥–æ–¥–∏–Ω", "4-5h");
      }
    }

    // –ù–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è –ø—Ä–æ –Ω–µ–≤–∑—è—Ç—ñ –∑–∞–¥–∞—á—ñ (—á–µ—Ä–µ–∑ –ø–µ–≤–Ω–∏–π —á–∞—Å –ø—ñ—Å–ª—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è)
    if (!task.takenById && !task.remindedNotTaken) {
      const hoursSinceCreation = (now - moment(task.createdAt)) / (1000 * 60 * 60);
      const maxWait = { –≤–∏—Å–æ–∫–∏–π: 2, —Å–µ—Ä–µ–¥–Ω—ñ–π: 3, –Ω–∏–∑—å–∫–∏–π: 4 }[task.priority] || 3;

      if (hoursSinceCreation >= maxWait) {
        const text = `‚ö†Ô∏è –ó–∞–¥–∞—á–∞ #${task.id} "${task.title}" —â–µ –Ω–µ –≤–∑—è—Ç–∞!\n–ü—Ä–∏–∑–Ω–∞—á–µ–Ω–∞: ${task.mentionedUsername ? `@${task.mentionedUsername}` : '–Ω–µ –ø—Ä–∏–∑–Ω–∞—á–µ–Ω–æ'}`;

        if (task.chatId && !task.isPrivate) {
          safeSendMessage(task.chatId, text);
        } else if (task.isPrivate && task.authorId) {
          safeSendMessage(task.authorId, text);
        }

        task.remindedNotTaken = true;
      }
    }
  });

  saveTasks();
}, 60 * 1000); // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —â–æ—Ö–≤–∏–ª–∏–Ω–∏

// ====== –©–æ–¥–µ–Ω–Ω—ñ –Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è –¥–ª—è —Ç–µ—Ä–º—ñ–Ω–æ–≤–∏—Ö –∑–∞–¥–∞—á ($) ======
setInterval(() => {
  const now = moment().tz(TIMEZONE);
  
  // –û 9:30 - –∫—ñ–ª—å–∫—ñ—Å—Ç—å –Ω–µ –≤–∑—è—Ç–∏—Ö —Ç–µ—Ä–º—ñ–Ω–æ–≤–∏—Ö –∑–∞–¥–∞—á –ö–û–ñ–ù–û–ú–£ –í–ò–ö–û–ù–ê–í–¶–Æ
  if (now.hour() === 9 && now.minute() === 30) {
    const urgentTasks = tasks.filter(t => 
      t.priority === "–≤–∏—Å–æ–∫–∏–π" && 
      t.status !== "–í–∏–∫–æ–Ω–∞–Ω–æ ‚úÖ" && 
      t.status !== "–í—ñ–¥—Ö–∏–ª–µ–Ω–æ ‚ùå"
    );

    // –ì—Ä—É–ø—É—î–º–æ –ø–æ –≤–∏–∫–æ–Ω–∞–≤—Ü—è–º (userIds)
    const userUrgentTasks = {};
    urgentTasks.forEach(task => {
      let executorId = null;
      
      // –°–ø–æ—á–∞—Ç–∫—É –ø–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –≤–∑—è—Ç—ñ –∑–∞–¥–∞—á—ñ
      if (task.takenById) {
        executorId = task.takenById;
      } 
      // –ü–æ—Ç—ñ–º –ø–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –ø—Ä–∏–∑–Ω–∞—á–µ–Ω—ñ –∑–∞–¥–∞—á—ñ (—è–∫—â–æ –≤–∏–∫–æ–Ω–∞–≤–µ—Ü—å –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω–∏–π)
      else if (task.mentionedUsername && userIds[task.mentionedUsername]) {
        executorId = userIds[task.mentionedUsername];
      }
      
      if (executorId) {
        if (!userUrgentTasks[executorId]) {
          userUrgentTasks[executorId] = [];
        }
        userUrgentTasks[executorId].push(task);
      }
    });

    // –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –ü–ï–†–°–û–ù–ê–õ–¨–ù–ï —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è –∫–æ–∂–Ω–æ–º—É –≤–∏–∫–æ–Ω–∞–≤—Ü—é
    Object.entries(userUrgentTasks).forEach(([executorId, executorTasks]) => {
      const notTakenCount = executorTasks.filter(t => !t.takenById).length;
      const inProgressCount = executorTasks.filter(t => t.takenById).length;
      
      let text = `üî¥ *–†–∞–Ω–∫–æ–≤–µ –Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è –ø—Ä–æ —Ç–µ—Ä–º—ñ–Ω–æ–≤—ñ –∑–∞–¥–∞—á—ñ*\n\n`;
      
      if (notTakenCount > 0) {
        text += `‚ö†Ô∏è –£ –≤–∞—Å ${notTakenCount} –Ω–µ –≤–∑—è—Ç–∏—Ö —Ç–µ—Ä–º—ñ–Ω–æ–≤–∏—Ö –∑–∞–¥–∞—á:\n`;
        executorTasks.filter(t => !t.takenById).forEach(task => {
          const deadlineStr = moment(task.deadline).tz(TIMEZONE).format("DD.MM HH:mm");
          text += `‚ñ´Ô∏è #${task.id} - "${task.title}" (–¥–æ ${deadlineStr})\n`;
        });
        text += `\n`;
      }
      
      if (inProgressCount > 0) {
        text += `üü° –£ –≤–∞—Å ${inProgressCount} —Ç–µ—Ä–º—ñ–Ω–æ–≤–∏—Ö –∑–∞–¥–∞—á –≤ —Ä–æ–±–æ—Ç—ñ:\n`;
        executorTasks.filter(t => t.takenById).forEach(task => {
          const deadlineStr = moment(task.deadline).tz(TIMEZONE).format("DD.MM HH:mm");
          text += `‚ñ´Ô∏è #${task.id} - "${task.title}" (–¥–æ ${deadlineStr})\n`;
        });
      }

      // –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –ü–†–ò–í–ê–¢–ù–û –≤–∏–∫–æ–Ω–∞–≤—Ü—é
      safeSendMessage(executorId, text, { parse_mode: "Markdown" })
        .catch(() => {
          // –Ø–∫—â–æ –Ω–µ –≤–¥–∞–ª–æ—Å—å –≤—ñ–¥–ø—Ä–∞–≤–∏—Ç–∏ –ø—Ä–∏–≤–∞—Ç–Ω–æ, –≤—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –≤ –≥—Ä—É–ø—É (—è–∫—â–æ –∑–∞–¥–∞—á–∞ –≥—Ä—É–ø–æ–≤–∞)
          const groupTasks = executorTasks.filter(t => t.chatId);
          if (groupTasks.length > 0) {
            const firstTask = groupTasks[0];
            safeSendMessage(firstTask.chatId, `@${executorTasks[0].mentionedUsername} ${text}`, { parse_mode: "Markdown" });
          }
        });
        // --- –û—Å—å —Å—é–¥–∏ –≤—Å—Ç–∞–≤–ª—è—î–º–æ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è –¥–ª—è –∞–≤—Ç–æ—Ä–∞ ---
        executorTasks.forEach(task => {
          if (task.authorId) {
            const timeStr = now.format("HH:mm");
            const authorText = `‚è∞ –ù–∞–≥–∞–¥–∫–∞ –ø—Ä–æ –∑–∞–¥–∞—á—É #${task.id} "${task.title}" –Ω–∞–¥—ñ—Å–ª–∞–Ω–∞ ${task.takenById ? "–≤–∑—è—Ç–æ–º—É –≤–∏–∫–æ–Ω–∞–≤—Ü—é" : "–ø—Ä–∏–∑–Ω–∞—á–µ–Ω–æ–º—É"} @${task.mentionedUsername || ''} –æ ${timeStr}`;
            safeSendMessage(task.authorId, authorText).catch(() => {});
          }
        });
    });

    // –°–ø–æ–≤—ñ—â–µ–Ω–Ω—è –¥–ª—è –ù–ï–ü–†–ò–ó–ù–ê–ß–ï–ù–ò–• —Ç–µ—Ä–º—ñ–Ω–æ–≤–∏—Ö –∑–∞–¥–∞—á (–≤ –≥—Ä—É–ø–∞—Ö)
    const unassignedUrgentTasks = urgentTasks.filter(t => 
      !t.takenById && 
      !t.mentionedUsername && 
      t.chatId
    );
    
    if (unassignedUrgentTasks.length > 0) {
      const tasksByChat = {};
      unassignedUrgentTasks.forEach(task => {
        if (!tasksByChat[task.chatId]) {
          tasksByChat[task.chatId] = [];
        }
        tasksByChat[task.chatId].push(task);
      });

      Object.entries(tasksByChat).forEach(([chatId, chatTasks]) => {
        let text = `üî¥ *–†–∞–Ω–∫–æ–≤–µ –Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è*\n\n`;
        text += `‚ö†Ô∏è –£ –≥—Ä—É–ø—ñ ${chatTasks.length} —Ç–µ—Ä–º—ñ–Ω–æ–≤–∏—Ö –∑–∞–¥–∞—á –±–µ–∑ –≤–∏–∫–æ–Ω–∞–≤—Ü—è:\n`;
        chatTasks.forEach(task => {
          const deadlineStr = moment(task.deadline).tz(TIMEZONE).format("DD.MM HH:mm");
          text += `‚ñ´Ô∏è #${task.id} - "${task.title}" (–¥–æ ${deadlineStr})\n`;
        });
        safeSendMessage(chatId, text, { parse_mode: "Markdown" });
      });
    }
  }

  // –û 10:30 - –¥–µ—Ç–∞–ª—å–Ω–∏–π —Å–ø–∏—Å–æ–∫ –Ω–µ–≤–∏–∫–æ–Ω–∞–Ω–∏—Ö —Ç–µ—Ä–º—ñ–Ω–æ–≤–∏—Ö –∑–∞–¥–∞—á –ö–û–ñ–ù–û–ú–£ –í–ò–ö–û–ù–ê–í–¶–Æ
  if (now.hour() === 10 && now.minute() === 30) {
    const urgentTasks = tasks.filter(t => 
      t.priority === "–≤–∏—Å–æ–∫–∏–π" && 
      t.status !== "–í–∏–∫–æ–Ω–∞–Ω–æ ‚úÖ" && 
      t.status !== "–í—ñ–¥—Ö–∏–ª–µ–Ω–æ ‚ùå"
    );

    // –ì—Ä—É–ø—É—î–º–æ –ø–æ –≤–∏–∫–æ–Ω–∞–≤—Ü—è–º (userIds)
    const userUrgentTasks = {};
    urgentTasks.forEach(task => {
      let executorId = null;
      
      if (task.takenById) {
        executorId = task.takenById;
      } else if (task.mentionedUsername && userIds[task.mentionedUsername]) {
        executorId = userIds[task.mentionedUsername];
      }
      
      if (executorId) {
        if (!userUrgentTasks[executorId]) {
          userUrgentTasks[executorId] = [];
        }
        userUrgentTasks[executorId].push(task);
      }
    });

    // –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –ü–ï–†–°–û–ù–ê–õ–¨–ù–ò–ô –¥–µ—Ç–∞–ª—å–Ω–∏–π —Å–ø–∏—Å–æ–∫ –∫–æ–∂–Ω–æ–º—É –≤–∏–∫–æ–Ω–∞–≤—Ü—é
    Object.entries(userUrgentTasks).forEach(([executorId, executorTasks]) => {
      let text = `üìã *–î–µ—Ç–∞–ª—å–Ω–∏–π —Å–ø–∏—Å–æ–∫ –≤–∞—à–∏—Ö —Ç–µ—Ä–º—ñ–Ω–æ–≤–∏—Ö –∑–∞–¥–∞—á:*\n\n`;
      
      executorTasks.forEach(task => {
        const deadlineStr = moment(task.deadline).tz(TIMEZONE).format("DD.MM HH:mm");
        const status = task.takenById ? "üü° –í —Ä–æ–±–æ—Ç—ñ" : "üî¥ –ù–µ –≤–∑—è—Ç–∞";
        const timeLeft = moment(task.deadline).fromNow();
        
        text += `#${task.id} - ${task.title}\n`;
        text += `   ${status}\n`;
        text += `   –î–µ–¥–ª–∞–π–Ω: ${deadlineStr} (${timeLeft})\n`;
        
        if (!task.takenById) {
          text += `   [–í–∑—è—Ç–∏ –∑–∞–¥–∞—á—É](/take_${task.id})\n`;
        } else {
          text += `   [–ó–∞–≤–µ—Ä—à–∏—Ç–∏](/done_${task.id})\n`;
        }
        text += `\n`;
      });

      // –î–æ–¥–∞—î–º–æ –∫–Ω–æ–ø–∫–∏ –¥–ª—è —à–≤–∏–¥–∫–∏—Ö –¥—ñ–π
      const buttons = executorTasks.slice(0, 5).map(task => [
        { 
          text: `‚úÖ #${task.id}`, 
          callback_data: `done_${task.id}` 
        },
        { 
          text: `üèÉ #${task.id}`, 
          callback_data: `take_${task.id}` 
        }
      ]);

      // –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –ü–†–ò–í–ê–¢–ù–û –≤–∏–∫–æ–Ω–∞–≤—Ü—é
      safeSendMessage(executorId, text, { 
        parse_mode: "Markdown",
        reply_markup: buttons.length > 0 ? { inline_keyboard: buttons } : undefined
      }).catch(() => {
        // –Ø–∫—â–æ –Ω–µ –≤–¥–∞–ª–æ—Å—å –≤—ñ–¥–ø—Ä–∞–≤–∏—Ç–∏ –ø—Ä–∏–≤–∞—Ç–Ω–æ, –≤—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –≤ –≥—Ä—É–ø—É
        const groupTasks = executorTasks.filter(t => t.chatId);
        if (groupTasks.length > 0) {
          const firstTask = groupTasks[0];
          const mentionedUser = firstTask.mentionedUsername ? `@${firstTask.mentionedUsername} ` : '';
          safeSendMessage(firstTask.chatId, `${mentionedUser}${text}`, { 
            parse_mode: "Markdown",
            reply_markup: buttons.length > 0 ? { inline_keyboard: buttons } : undefined
          });
        }
      });
      // --- –û—Å—å —Å—é–¥–∏ –≤—Å—Ç–∞–≤–ª—è—î–º–æ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è –¥–ª—è –∞–≤—Ç–æ—Ä–∞ ---
      executorTasks.forEach(task => {
        if (task.authorId) {
          const timeStr = now.format("HH:mm");
          const authorText = `‚è∞ –ù–∞–≥–∞–¥–∫–∞ –ø—Ä–æ –∑–∞–¥–∞—á—É #${task.id} "${task.title}" –Ω–∞–¥—ñ—Å–ª–∞–Ω–∞ ${task.takenById ? "–≤–∑—è—Ç–æ–º—É –≤–∏–∫–æ–Ω–∞–≤—Ü—é" : "–ø—Ä–∏–∑–Ω–∞—á–µ–Ω–æ–º—É"} @${task.mentionedUsername || ''} –æ ${timeStr}`;
          safeSendMessage(task.authorId, authorText).catch(() => {});
        }
      });
    });

    // –°–ø–æ–≤—ñ—â–µ–Ω–Ω—è –¥–ª—è –∞–≤—Ç–æ—Ä—ñ–≤ –ø—Ä–æ —ó—Ö–Ω—ñ –Ω–µ–ø—Ä–∏–∑–Ω–∞—á–µ–Ω—ñ —Ç–µ—Ä–º—ñ–Ω–æ–≤—ñ –∑–∞–¥–∞—á—ñ
    const authorUrgentTasks = {};
    urgentTasks.forEach(task => {
      if (!task.takenById && !task.mentionedUsername && task.authorId) {
        if (!authorUrgentTasks[task.authorId]) {
          authorUrgentTasks[task.authorId] = [];
        }
        authorUrgentTasks[task.authorId].push(task);
      }
    });

    Object.entries(authorUrgentTasks).forEach(([authorId, authorTasks]) => {
      let text = `üìã *–í–∞—à—ñ —Ç–µ—Ä–º—ñ–Ω–æ–≤—ñ –∑–∞–¥–∞—á—ñ –±–µ–∑ –≤–∏–∫–æ–Ω–∞–≤—Ü—è:*\n\n`;
      authorTasks.forEach(task => {
        const deadlineStr = moment(task.deadline).tz(TIMEZONE).format("DD.MM HH:mm");
        const timeLeft = moment(task.deadline).fromNow();
        text += `#${task.id} - ${task.title}\n`;
        text += `   –î–µ–¥–ª–∞–π–Ω: ${deadlineStr} (${timeLeft})\n\n`;
      });

      safeSendMessage(authorId, text, { parse_mode: "Markdown" })
        .catch(() => {
          // –Ø–∫—â–æ –Ω–µ –≤–¥–∞–ª–æ—Å—å –≤—ñ–¥–ø—Ä–∞–≤–∏—Ç–∏ –∞–≤—Ç–æ—Ä—É, –≤—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –≤ –≥—Ä—É–ø—É
          const groupTask = authorTasks.find(t => t.chatId);
          if (groupTask) {
            safeSendMessage(groupTask.chatId, text, { parse_mode: "Markdown" });
          }
        });
    });
  }
}, 60 * 1000);

// let lastDailyReport = null;
// // ====== –©–æ–¥–µ–Ω–Ω–∏–π –∑–≤—ñ—Ç –æ 18:00 (–¢–Ü–õ–¨–ö–ò –í –ì–†–£–ü–£) ======
// setInterval(() => {
//   const now = moment().tz(TIMEZONE);
//   const today = now.format("YYYY-MM-DD");
  
//   if (now.hour() === 18 && now.minute() === 0 && lastDailyReport !== today) {
//     lastDailyReport = today;

//     // –ì—Ä—É–ø—É—î–º–æ –∑–∞–¥–∞—á—ñ –ø–æ chatId (–≥—Ä—É–ø–∞–º) - —Ç—ñ–ª—å–∫–∏ –≥—Ä—É–ø–æ–≤—ñ –∑–∞–¥–∞—á—ñ
//     const tasksByChat = {};
//     tasks.forEach(task => {
//       if (task.chatId && !task.isPrivate) { // –¢—ñ–ª—å–∫–∏ –≥—Ä—É–ø–æ–≤—ñ –∑–∞–¥–∞—á—ñ
//         if (!tasksByChat[task.chatId]) {
//           tasksByChat[task.chatId] = [];
//         }
//         tasksByChat[task.chatId].push(task);
//       }
//     });

//     // –î–ª—è –∫–æ–∂–Ω–æ—ó –≥—Ä—É–ø–∏ —Ñ–æ—Ä–º—É—î–º–æ –∑–≤—ñ—Ç
//     Object.entries(tasksByChat).forEach(([chatId, chatTasks]) => {
//       const oneMonthAgo = moment().subtract(1, 'month').valueOf();
//       const lastMonthTasks = chatTasks.filter(t => t.createdAt >= oneMonthAgo);

//       const activeTasks = lastMonthTasks.filter(t => t.status !== "–í–∏–∫–æ–Ω–∞–Ω–æ ‚úÖ" && t.status !== "–í—ñ–¥—Ö–∏–ª–µ–Ω–æ ‚ùå");
//       const completedToday = lastMonthTasks.filter(t => {
//         if (t.status !== "–í–∏–∫–æ–Ω–∞–Ω–æ ‚úÖ" || !t.completedAt) return false;
//         const completedDate = moment(t.completedAt).tz(TIMEZONE);
//         return completedDate.isSame(now, "day");
//       });
      
//       if (activeTasks.length === 0 && completedToday.length === 0) return;

//       let text = "üìä *–©–æ–¥–µ–Ω–Ω–∏–π –∑–≤—ñ—Ç (–æ—Å—Ç–∞–Ω–Ω—ñ–π –º—ñ—Å—è—Ü—å):*\n\n";
      
//       text += "üìå *–ù–µ–≤–∏–∫–æ–Ω–∞–Ω—ñ –∑–∞–¥–∞—á—ñ:*\n";
//       if (activeTasks.length === 0) {
//         text += "_–Ω–µ–º–∞—î_\n";
//       } else {
//         activeTasks.forEach(task => {
//           const deadlineStr = task.deadline ? moment(task.deadline).tz(TIMEZONE).format("DD.MM HH:mm") : "–Ω–µ –≤–∫–∞–∑–∞–Ω–æ";
//           const responsible = task.takenByName || (task.mentionedUsername ? `@${task.mentionedUsername}` : "–Ω–µ –ø—Ä–∏–∑–Ω–∞—á–µ–Ω–æ");
//           text += `#${task.id} - ${task.title}\n   –í—ñ–¥–ø–æ–≤—ñ–¥–∞–ª—å–Ω–∏–π: ${responsible}\n   –î–µ–¥–ª–∞–π–Ω: ${deadlineStr}\n\n`;
//         });
//       }
      
//       text += "‚úÖ *–í–∏–∫–æ–Ω–∞–Ω—ñ —Å—å–æ–≥–æ–¥–Ω—ñ:*\n";
//       if (completedToday.length === 0) {
//         text += "_–Ω–µ–º–∞—î_\n";
//       } else {
//         completedToday.forEach(task => {
//           const responsible = task.takenByName || task.authorName;
//           text += `#${task.id} - ${task.title} (${responsible})\n`;
//         });
//       }

//       const buttons = [
//         [{ text: "üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ 7 –¥–Ω—ñ–≤", callback_data: "stats_7days" }]
//       ];

//       safeSendMessage(chatId, text, { parse_mode: "Markdown", reply_markup: { inline_keyboard: buttons } })
//         .catch(() => console.log(`–ù–µ –≤–¥–∞–ª–æ—Å—å –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ –∑–≤—ñ—Ç —É —á–∞—Ç ${chatId}`));
//     });
//   }
// }, 60 * 1000);
let lastDailyReport = null;
// ====== üìÖ –©–æ–¥–µ–Ω–Ω–∏–π –∑–≤—ñ—Ç –æ 18:00 ======
setInterval(() => {
  const now = moment().tz(TIMEZONE);
  const today = now.format("YYYY-MM-DD");

  if (now.hour() === 12 && now.minute() === 43 && lastDailyReport !== today) {
    lastDailyReport = today;

    // --- 1Ô∏è‚É£ –ì—Ä—É–ø–æ–≤—ñ –∑–∞–¥–∞—á—ñ (–π–¥–µ —É —á–∞—Ç) ---
    const tasksByChat = {};
    tasks.forEach(task => {
      if (task.chatId && !task.isPrivate) {
        if (!tasksByChat[task.chatId]) tasksByChat[task.chatId] = [];
        tasksByChat[task.chatId].push(task);
      }
    });

    Object.entries(tasksByChat).forEach(([chatId, chatTasks]) => {
      const completedToday = chatTasks.filter(t =>
        t.status === "–í–∏–∫–æ–Ω–∞–Ω–æ ‚úÖ" &&
        t.completedAt &&
        moment(t.completedAt).tz(TIMEZONE).isSame(now, "day")
      );

      const rejectedToday = chatTasks.filter(t =>
        t.status === "–í—ñ–¥—Ö–∏–ª–µ–Ω–æ ‚ùå" &&
        t.updatedAt &&
        moment(t.updatedAt).tz(TIMEZONE).isSame(now, "day")
      );

      const inProgress = chatTasks.filter(t =>
        t.status === "–í —Ä–æ–±–æ—Ç—ñ üöß" || t.status === "–í–∑—è—Ç–æ üßë‚Äçüíª"
      );

      const notTaken = chatTasks.filter(t => t.status === "–ù–æ–≤–µ üÜï");

      if (
        completedToday.length === 0 &&
        rejectedToday.length === 0 &&
        inProgress.length === 0 &&
        notTaken.length === 0
      ) return;

      let text = "üìä *–©–æ–¥–µ–Ω–Ω–∏–π –∑–≤—ñ—Ç –∑–∞ —Å—å–æ–≥–æ–¥–Ω—ñ:*\n\n";

      text += "‚úÖ *–í–∏–∫–æ–Ω–∞–Ω—ñ —Å—å–æ–≥–æ–¥–Ω—ñ:*\n";
      text += completedToday.length
        ? completedToday.map(t => `#${t.id} - ${t.title} (${t.takenByName || "–Ω–µ–≤—ñ–¥–æ–º–æ"})`).join("\n") + "\n\n"
        : "_–Ω–µ–º–∞—î_\n\n";

      text += "üö´ *–í—ñ–¥—Ö–∏–ª–µ–Ω—ñ —Å—å–æ–≥–æ–¥–Ω—ñ:*\n";
      text += rejectedToday.length
        ? rejectedToday.map(t => `#${t.id} - ${t.title}`).join("\n") + "\n\n"
        : "_–Ω–µ–º–∞—î_\n\n";

      text += "üïê *–£ —Ä–æ–±–æ—Ç—ñ:*\n";
      text += inProgress.length
        ? inProgress.map(t => {
            const deadline = t.deadline ? moment(t.deadline).tz(TIMEZONE).format("DD.MM HH:mm") : "–Ω–µ –≤–∫–∞–∑–∞–Ω–æ";
            return `#${t.id} - ${t.title}\n   –í—ñ–¥–ø–æ–≤—ñ–¥–∞–ª—å–Ω–∏–π: ${t.takenByName || "–Ω–µ–≤—ñ–¥–æ–º–æ"}\n   –î–µ–¥–ª–∞–π–Ω: ${deadline}`;
          }).join("\n\n") + "\n\n"
        : "_–Ω–µ–º–∞—î_\n\n";

      text += "üÜï *–ù–µ –≤–∑—è—Ç—ñ:*\n";
      text += notTaken.length
        ? notTaken.map(t => `#${t.id} - ${t.title}`).join("\n") + "\n\n"
        : "_–Ω–µ–º–∞—î_\n\n";

      safeSendMessage(chatId, text, { parse_mode: "Markdown" })
        .catch(() => console.log(`–ù–µ –≤–¥–∞–ª–æ—Å—å –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ –∑–≤—ñ—Ç —É —á–∞—Ç ${chatId}`));
    });

    // --- 2Ô∏è‚É£ –ü—Ä–∏–≤–∞—Ç–Ω—ñ –∑–∞–¥–∞—á—ñ (–π–¥–µ –ø–æ—Å—Ç–∞–Ω–æ–≤–Ω–∏–∫–∞–º) ---
    const privateTasks = tasks.filter(t => t.isPrivate && t.authorId);
    const tasksByAuthor = {};

    privateTasks.forEach(task => {
      if (!tasksByAuthor[task.authorId]) tasksByAuthor[task.authorId] = [];
      tasksByAuthor[task.authorId].push(task);
    });

    Object.entries(tasksByAuthor).forEach(([authorId, authorTasks]) => {
      const completedToday = authorTasks.filter(t =>
        t.status === "–í–∏–∫–æ–Ω–∞–Ω–æ ‚úÖ" &&
        t.completedAt &&
        moment(t.completedAt).tz(TIMEZONE).isSame(now, "day")
      );

      const rejectedToday = authorTasks.filter(t =>
        t.status === "–í—ñ–¥—Ö–∏–ª–µ–Ω–æ ‚ùå" &&
        t.updatedAt &&
        moment(t.updatedAt).tz(TIMEZONE).isSame(now, "day")
      );

      const inProgress = authorTasks.filter(t =>
        t.status === "–í —Ä–æ–±–æ—Ç—ñ üöß" || t.status === "–í–∑—è—Ç–æ üßë‚Äçüíª"
      );

      const notTaken = authorTasks.filter(t => t.status === "–ù–æ–≤–µ üÜï");

      if (
        completedToday.length === 0 &&
        rejectedToday.length === 0 &&
        inProgress.length === 0 &&
        notTaken.length === 0
      ) return;

      let text = "üìã *–í–∞—à —â–æ–¥–µ–Ω–Ω–∏–π –∑–≤—ñ—Ç –∑–∞ —Å—å–æ–≥–æ–¥–Ω—ñ:*\n\n";

      text += "‚úÖ *–í–∏–∫–æ–Ω–∞–Ω—ñ —Å—å–æ–≥–æ–¥–Ω—ñ:*\n";
      text += completedToday.length
        ? completedToday.map(t => `#${t.id} - ${t.title}`).join("\n") + "\n\n"
        : "_–Ω–µ–º–∞—î_\n\n";

      text += "üö´ *–í—ñ–¥—Ö–∏–ª–µ–Ω—ñ —Å—å–æ–≥–æ–¥–Ω—ñ:*\n";
      text += rejectedToday.length
        ? rejectedToday.map(t => `#${t.id} - ${t.title}`).join("\n") + "\n\n"
        : "_–Ω–µ–º–∞—î_\n\n";

      text += "üïê *–£ —Ä–æ–±–æ—Ç—ñ:*\n";
      text += inProgress.length
        ? inProgress.map(t => {
            const deadline = t.deadline ? moment(t.deadline).tz(TIMEZONE).format("DD.MM HH:mm") : "–Ω–µ –≤–∫–∞–∑–∞–Ω–æ";
            return `#${t.id} - ${t.title}\n   –í–∏–∫–æ–Ω–∞–≤–µ—Ü—å: ${t.takenByName || "–Ω–µ–≤—ñ–¥–æ–º–æ"}\n   –î–µ–¥–ª–∞–π–Ω: ${deadline}`;
          }).join("\n\n") + "\n\n"
        : "_–Ω–µ–º–∞—î_\n\n";

      text += "üÜï *–ù–µ –≤–∑—è—Ç—ñ:*\n";
      text += notTaken.length
        ? notTaken.map(t => `#${t.id} - ${t.title}`).join("\n") + "\n\n"
        : "_–Ω–µ–º–∞—î_\n\n";

      safeSendMessage(authorId, text, { parse_mode: "Markdown" })
        .catch(() => console.log(`–ù–µ –≤–¥–∞–ª–æ—Å—å –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ –∑–≤—ñ—Ç –ø–æ—Å—Ç–∞–Ω–æ–≤–Ω–∏–∫—É ${authorId}`));
    });
  }
}, 60 * 1000);

// ====== –í–µ–±-—Å–µ—Ä–≤–µ—Ä ======
const app = express();
app.get("/", (req, res) => res.send("–ë–æ—Ç –ø—Ä–∞—Ü—é—î!"));
app.listen(process.env.PORT || 3000, () => console.log("–°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω–æ"));

console.log("ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω–æ");