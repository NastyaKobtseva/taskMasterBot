
import dotenv from "dotenv";
dotenv.config();

import TelegramBot from "node-telegram-bot-api";
import express from "express";
import moment from "moment-timezone";
import fs from "fs";
import path from "path";

// ====== –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è ======
const TELEGRAM_TOKEN = process.env.TELEGRAM_TOKEN;
const TIMEZONE = process.env.TIMEZONE || "Europe/Kiev";
const TASKS_FILE = path.join(process.cwd(), "tasks.json");
const USERS_FILE = path.join(process.cwd(), "userIds.json");

// ====== –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –±–æ—Ç–∞ ======
const bot = new TelegramBot(TELEGRAM_TOKEN, { polling: true });

// ====== –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ ======
let userIds = {};
try {
  if (fs.existsSync(USERS_FILE)) {
    userIds = JSON.parse(fs.readFileSync(USERS_FILE, "utf8"));
  }
} catch (err) {
  console.error("–ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è users:", err);
  userIds = {};
}

// ====== –°–∏—Å—Ç–µ–º–∞ –∑–∞–¥–∞—á ======
let tasks = [];
let nextTaskId = 1;

// ====== –£—Ç–∏–ª—ñ—Ç–∏ ======
function chunkButtons(buttons, n = 2) {
  const rows = [];
  for (let i = 0; i < buttons.length; i += n) {
    rows.push(buttons.slice(i, i + n));
  }
  return rows;
}

function safeSendMessage(chatId, text, options = {}) {
  return bot.sendMessage(chatId, text, options).catch(err => {
    if (err.response && err.response.statusCode === 429) {
      const retryAfter = err.response.parameters?.retry_after || 5;
      console.log(`‚è≥ Telegram flood. Retry after ${retryAfter} sec`);
      setTimeout(() => safeSendMessage(chatId, text, options), retryAfter * 1000);
    } else {
      console.error("–ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥–ø—Ä–∞–≤–∫–∏:", err);
      throw err; // –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ –ø–æ–º–∏–ª–∫—É –¥–ª—è catch
    }
  });
}

// ====== –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è —Ç–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö ======
function loadTasks() {
  try {
    if (fs.existsSync(TASKS_FILE)) {
      const data = fs.readFileSync(TASKS_FILE, "utf8");
      tasks = JSON.parse(data);
      nextTaskId = tasks.length > 0 ? Math.max(...tasks.map(t => t.id)) + 1 : 1;
    }
  } catch (err) {
    console.error("–ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è tasks:", err);
    tasks = [];
    nextTaskId = 1;
  }
}

function saveTasks() {
  try {
    fs.writeFileSync(TASKS_FILE, JSON.stringify(tasks, null, 2));
  } catch (err) {
    console.error("–ü–æ–º–∏–ª–∫–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è tasks:", err);
  }
}

function saveUsers() {
  try {
    fs.writeFileSync(USERS_FILE, JSON.stringify(userIds, null, 2));
  } catch (err) {
    console.error("–ü–æ–º–∏–ª–∫–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è users:", err);
  }
}

loadTasks();

// ====== –û–±—Ä–æ–±–∫–∞ /start ======
bot.onText(/\/start/, (msg) => {
  const chatId = msg.chat.id;
  const username = msg.from.username;

  if (!username) {
    return bot.sendMessage(chatId, "‚ùå –ë–æ—Ç –ø–æ—Ç—Ä–µ–±—É—î username –¥–ª—è –∫–æ—Ä–µ–∫—Ç–Ω–æ—ó —Ä–æ–±–æ—Ç–∏. –ë—É–¥—å –ª–∞—Å–∫–∞, –≤—Å—Ç–∞–Ω–æ–≤—ñ—Ç—å username –≤ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è—Ö Telegram.");
  }

  if (!userIds[username]) {
    userIds[username] = chatId;
    saveUsers();
  }

  bot.sendMessage(chatId, `–ü—Ä–∏–≤—ñ—Ç, ${msg.from.first_name}! –ë–æ—Ç –∞–∫—Ç–∏–≤–æ–≤–∞–Ω–∏–π ‚úÖ\n\n–í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π /help –¥–ª—è —ñ–Ω—Å—Ç—Ä—É–∫—Ü—ñ—ó.`);
});

// ====== –û–±—Ä–æ–±–∫–∞ –ø–æ–º–∏–ª–æ–∫ ======
bot.on("polling_error", (err) => {
  console.error("–ü–æ–º–∏–ª–∫–∞ polling:", err.code, err.response?.body || err);
});

// ====== –û–±—Ä–æ–±–∫–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å ======
bot.on("message", (msg) => {
  const chatId = msg.chat.id;
  const text = msg.text;
  const userId = msg.from.id;
  
  if (!text || text.startsWith('/')) return;

  // –û–±—Ä–æ–±–∫–∞ –∫–∞—Å—Ç–æ–º–Ω–æ–≥–æ –Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è
  const waitingCustomRemindTask = tasks.find(t => t.waitingCustomRemind === userId);
  if (waitingCustomRemindTask) {
    const hours = parseFloat(text.replace(',', '.'));
    if (isNaN(hours) || hours <= 0) {
      return bot.sendMessage(chatId, "‚ùå –í–≤–µ–¥—ñ—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω–µ —á–∏—Å–ª–æ –≥–æ–¥–∏–Ω (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥: 1.5 –∞–±–æ 2).");
    }

    waitingCustomRemindTask.reminderMinutes = hours * 60;
    delete waitingCustomRemindTask.waitingCustomRemind;
    saveTasks();

    return bot.sendMessage(chatId, `‚è∞ –ù–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è –¥–ª—è –∑–∞–¥–∞—á—ñ #${waitingCustomRemindTask.id} –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –Ω–∞ ${hours} –≥–æ–¥. –¥–æ –¥–µ–¥–ª–∞–π–Ω—É.`);
  }

  // –û–±—Ä–æ–±–∫–∞ –∑–º—ñ–Ω–∏ –¥–µ–¥–ª–∞–π–Ω—É
  const waitingDeadlineTask = tasks.find(t => t.waitingDeadlineChange === userId);
  if (waitingDeadlineTask) {
    const newDeadlineMatch = text.match(/^(\d{2}\.\d{2})\s+(\d{2}:\d{2})$/);
    if (!newDeadlineMatch) {
      return bot.sendMessage(chatId, "‚ùå –§–æ—Ä–º–∞—Ç –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π. –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ DD.MM HH:mm (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥: 25.12 14:30)");
    }

    const year = new Date().getFullYear();
    const fullDateStr = `${newDeadlineMatch[1]}.${year} ${newDeadlineMatch[2]}`;
    const newDeadline = moment.tz(fullDateStr, "DD.MM.YYYY HH:mm", TIMEZONE).toDate();

    if (newDeadline.toString() === 'Invalid Date') {
      return bot.sendMessage(chatId, "‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∞ –¥–∞—Ç–∞. –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ —Ñ–æ—Ä–º–∞—Ç DD.MM HH:mm");
    }

    waitingDeadlineTask.deadline = newDeadline;
    delete waitingDeadlineTask.waitingDeadlineChange;
    saveTasks();

    const deadlineStr = moment(newDeadline).tz(TIMEZONE).format("DD.MM, HH:mm");
    const notificationText = `‚ö° –î–µ–¥–ª–∞–π–Ω –∑–∞–¥–∞—á—ñ #${waitingDeadlineTask.id} –∑–º—ñ–Ω–µ–Ω–æ –Ω–∞ ${deadlineStr}`;

    // –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤–∏–∫–æ–Ω–∞–≤—Ü—é (—è–∫—â–æ –≤—ñ–Ω —î)
    if (waitingDeadlineTask.takenById && userId !== waitingDeadlineTask.takenById) {
      safeSendMessage(waitingDeadlineTask.takenById, notificationText)
        .catch(() => console.log("–ù–µ –≤–¥–∞–ª–æ—Å—å –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ –≤–∏–∫–æ–Ω–∞–≤—Ü—é"));
    }

    return bot.sendMessage(chatId, `‚úÖ –î–µ–¥–ª–∞–π–Ω –æ–Ω–æ–≤–ª–µ–Ω–æ: ${deadlineStr}`);
  }

  // –û–±—Ä–æ–±–∫–∞ –Ω–æ–≤–∏—Ö –∑–∞–¥–∞—á
  if (!text.startsWith("$") && !text.startsWith("#") && !text.startsWith("!")) return;

  const taskRegex = /^(.*)\s+(\d{2}\.\d{2})\s+(\d{2}:\d{2})$/;
  const match = text.match(taskRegex);

  let title = text;
  let deadline = null;
  
  if (match) {
    title = match[1].trim();
    const dayMonth = match[2];
    const time = match[3];
    const year = new Date().getFullYear();
    const fullDateStr = `${dayMonth}.${year} ${time}`;
    deadline = moment.tz(fullDateStr, "DD.MM.YYYY HH:mm", TIMEZONE).toDate();
    
    if (deadline.toString() === 'Invalid Date') {
      return bot.sendMessage(chatId, "‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç–∏. –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ DD.MM HH:mm");
    }
  } else {
    deadline = moment().tz(TIMEZONE).hour(18).minute(0).second(0).toDate();
  }

  // –í–∏–∑–Ω–∞—á–µ–Ω–Ω—è –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó —Ç–∞ –ø—Ä—ñ–æ—Ä–∏—Ç–µ—Ç—É
  const symbol = text[0];
  let category = "–ó–≤–∏—á–∞–π–Ω–∞", priority = "–Ω–∏–∑—å–∫–∏–π";
  if (symbol === "$") { category = "–¢–µ—Ä–º—ñ–Ω–æ–≤–∞"; priority = "–≤–∏—Å–æ–∫–∏–π"; }
  else if (symbol === "#") { category = "–ó–≤–∏—á–∞–π–Ω–∞"; priority = "—Å–µ—Ä–µ–¥–Ω—ñ–π"; }
  else if (symbol === "!") { category = "–û–ø—Ü—ñ–æ–Ω–∞–ª—å–Ω–∞"; priority = "–Ω–∏–∑—å–∫–∏–π"; }

  // –ü–æ—à—É–∫ –≤–∏–∫–æ–Ω–∞–≤—Ü—è
  let mentionedUsername = null;
  const usernameMatch = text.match(/@(\w+)/);
  if (usernameMatch) mentionedUsername = usernameMatch[1];

  // –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –∑–∞–¥–∞—á—ñ
  const task = {
    id: nextTaskId++,
    title: title.replace(/^[$#!]\s*/, "").replace(/@\w+/g, "").trim(),
    authorName: msg.from.username || msg.from.first_name,
    authorId: msg.from.id,
    status: "–ù–æ–≤–µ",
    chatId,
    createdAt: Date.now(),
    deadline,
    reminded: false,
    category,
    priority,
    takenByName: null,
    takenById: null,
    mentionedUsername,
    remindedNotTaken: false,
    reminderMinutes: null,
    sentReminders: [],
    waitingCustomRemind: null,
    waitingDeadlineChange: null
  };
  
  tasks.push(task);
  saveTasks();

  const deadlineStr = moment(deadline).tz(TIMEZONE).format("DD.MM, HH:mm");
  const responsibleId = mentionedUsername ? userIds[mentionedUsername] : null;

  // –ö–Ω–æ–ø–∫–∏ –¥–ª—è —ñ–Ω—Ç–µ—Ä—Ñ–µ–π—Å—É
  const allGroupButtons = [
    { text: "üèÉ –í–∑—è—Ç–∏", callback_data: `take_${task.id}` },
    { text: "‚úÖ –í–∏–∫–æ–Ω–∞—Ç–∏", callback_data: `done_${task.id}` },
    { text: "üóëÔ∏è –í–∏–¥–∞–ª–∏—Ç–∏", callback_data: `delete_${task.id}` },
    { text: "‚úèÔ∏è –ó–º—ñ–Ω–∏—Ç–∏ –¥–µ–¥–ª–∞–π–Ω", callback_data: `changeDeadline_${task.id}` }
  ];

  if (responsibleId) {
    // –ü—Ä–∏–≤–∞—Ç–Ω–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤–∏–∫–æ–Ω–∞–≤—Ü—é
    const privateButtons = [
      [
        { text: "üèÉ –í–∑—è—Ç–∏", callback_data: `take_${task.id}` },
        { text: "‚úÖ –í–∏–∫–æ–Ω–∞—Ç–∏", callback_data: `done_${task.id}` }
      ],
      [
        { text: "‚è∞ –ù–∞–ª–∞—à—Ç—É–≤–∞—Ç–∏ –Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è", callback_data: `customRemind_${task.id}` }
      ]
    ];

    safeSendMessage(
      responsibleId,
      `üìå –í–∞–º –Ω–∞–¥–∞–ª–∏ –∑–∞–≤–¥–∞–Ω–Ω—è #${task.id} –≤—ñ–¥ ${task.authorName}:\n"${task.title}"\n–ö–∞—Ç–µ–≥–æ—Ä—ñ—è: ${task.category}\n–ü—Ä—ñ–æ—Ä–∏—Ç–µ—Ç: ${task.priority}\n–î–µ–¥–ª–∞–π–Ω: ${deadlineStr}`,
      { reply_markup: { inline_keyboard: privateButtons } }
    ).catch(() => {
      console.log(`–ù–µ –≤–¥–∞–ª–æ—Å—å –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ @${mentionedUsername}, –≤—ñ–Ω —â–µ –Ω–µ –∑–∞–ø—É—Å—Ç–∏–≤ –±–æ—Ç–∞`);
    });

    // –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤ –≥—Ä—É–ø—É
    const groupButtons = [
      [
        { text: "üóëÔ∏è –í–∏–¥–∞–ª–∏—Ç–∏", callback_data: `delete_${task.id}` },
        { text: "‚úèÔ∏è –ó–º—ñ–Ω–∏—Ç–∏ –¥–µ–¥–ª–∞–π–Ω", callback_data: `changeDeadline_${task.id}` }
      ]
    ];
    
    bot.sendMessage(
      chatId,
      `‚úÖ –ó–∞–¥–∞—á–∞ #${task.id} —Å—Ç–≤–æ—Ä–µ–Ω–∞ –¥–ª—è @${mentionedUsername}\nüìù "${task.title}"`,
      { reply_markup: { inline_keyboard: groupButtons } }
    );
  } else {
    // –ó–∞–¥–∞—á–∞ –±–µ–∑ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–æ–≥–æ –≤–∏–∫–æ–Ω–∞–≤—Ü—è
    let messageText = `‚úÖ –ó–∞–¥–∞—á–∞ #${task.id} —Å—Ç–≤–æ—Ä–µ–Ω–∞!\n"${task.title}"\n–ö–∞—Ç–µ–≥–æ—Ä—ñ—è: ${task.category}\n–ü—Ä—ñ–æ—Ä–∏—Ç–µ—Ç: ${task.priority}\n–î–µ–¥–ª–∞–π–Ω: ${deadlineStr}`;

    if (mentionedUsername) {
      messageText += `\n\n‚ö†Ô∏è @${mentionedUsername} —â–µ –Ω–µ –∑–∞–ø—É—Å—Ç–∏–≤ –±–æ—Ç–∞`;
    }

    bot.sendMessage(
      chatId, 
      messageText, 
      { reply_markup: { inline_keyboard: chunkButtons(allGroupButtons, 2) } }
    );
  }
});

// ====== Inline –∫–Ω–æ–ø–∫–∏ ======
bot.on("callback_query", async (query) => {
  const chatId = query.message.chat.id;
  const messageId = query.message.message_id;
  const userId = query.from.id;
  const [action, taskId] = query.data.split('_');
  const task = tasks.find(t => t.id === parseInt(taskId));
  
  if (!task) {
    return bot.answerCallbackQuery(query.id, { text: "‚ùå –ó–∞–¥–∞—á–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∞" });
  }

  try {
    switch (action) {
      case "take":
        if (task.status === "–í–∏–∫–æ–Ω–∞–Ω–æ ‚úÖ") {
          return bot.answerCallbackQuery(query.id, { text: "‚ùå –ó–∞–¥–∞—á–∞ –≤–∂–µ –≤–∏–∫–æ–Ω–∞–Ω–∞", show_alert: true });
        }

        task.status = "–í–∑—è–≤—Å—è üèÉ";
        task.takenByName = query.from.username || query.from.first_name;
        task.takenById = userId;
        saveTasks();

        // –û–Ω–æ–≤–ª—é—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
        await bot.editMessageReplyMarkup(
          { inline_keyboard: [] },
          { chat_id: chatId, message_id: messageId }
        ).catch(() => console.log("–ù–µ –≤–¥–∞–ª–æ—Å—å –æ–Ω–æ–≤–∏—Ç–∏ markup"));

        bot.sendMessage(
          chatId,
          `üîπ –ó–∞–¥–∞—á–∞ #${task.id} –≤–∑—è—Ç–∞ ${task.takenByName}`
        );

        // –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∞–≤—Ç–æ—Ä—É
        if (task.authorId && task.authorId !== userId) {
          safeSendMessage(
            task.authorId,
            `üîπ –ó–∞–¥–∞—á–∞ #${task.id} "${task.title}" –≤–∑—è—Ç–∞ ${task.takenByName}`
          ).catch(() => console.log("–ù–µ –≤–¥–∞–ª–æ—Å—å –ø–æ–≤—ñ–¥–æ–º–∏—Ç–∏ –∞–≤—Ç–æ—Ä–∞"));
        }
        break;

      case "customRemind":
        task.waitingCustomRemind = userId;
        saveTasks();
        bot.sendMessage(userId, `–í–≤–µ–¥—ñ—Ç—å –∫—ñ–ª—å–∫—ñ—Å—Ç—å –≥–æ–¥–∏–Ω –¥–ª—è –Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è –ø—Ä–æ –∑–∞–¥–∞—á—É #${task.id}:`);
        break;

      case "changeDeadline":
        if (userId !== task.authorId) {
          return bot.answerCallbackQuery(query.id, {
            text: "‚õî –õ–∏—à–µ –ø–æ—Å—Ç–∞–Ω–æ–≤–Ω–∏–∫ –º–æ–∂–µ –∑–º—ñ–Ω—é–≤–∞—Ç–∏ –¥–µ–¥–ª–∞–π–Ω!",
            show_alert: true
          });
        }

        task.waitingDeadlineChange = userId;
        saveTasks();
        bot.sendMessage(userId, `–í–≤–µ–¥—ñ—Ç—å –Ω–æ–≤–∏–π –¥–µ–¥–ª–∞–π–Ω –¥–ª—è –∑–∞–¥–∞—á—ñ #${task.id} (DD.MM HH:mm):`);
        break;

      case "done":
        task.status = "–í–∏–∫–æ–Ω–∞–Ω–æ ‚úÖ";
        saveTasks();

        await bot.editMessageReplyMarkup(
          { inline_keyboard: [] },
          { chat_id: chatId, message_id: messageId }
        ).catch(() => console.log("–ù–µ –≤–¥–∞–ª–æ—Å—å –æ–Ω–æ–≤–∏—Ç–∏ markup"));

        bot.sendMessage(chatId, `‚úÖ –ó–∞–¥–∞—á–∞ #${task.id} –≤–∏–∫–æ–Ω–∞–Ω–∞!`);

        if (task.authorId && task.authorId !== userId) {
          safeSendMessage(
            task.authorId,
            `‚úÖ –ó–∞–¥–∞—á–∞ #${task.id} "${task.title}" –≤–∏–∫–æ–Ω–∞–Ω–∞ ${task.takenByName || query.from.first_name}`
          ).catch(() => console.log("–ù–µ –≤–¥–∞–ª–æ—Å—å –ø–æ–≤—ñ–¥–æ–º–∏—Ç–∏ –∞–≤—Ç–æ—Ä–∞"));
        }
        break;

      case "delete":
        if (userId !== task.authorId) {
          return bot.answerCallbackQuery(query.id, {
            text: "‚õî –õ–∏—à–µ –ø–æ—Å—Ç–∞–Ω–æ–≤–Ω–∏–∫ –º–æ–∂–µ –≤–∏–¥–∞–ª—è—Ç–∏ –∑–∞–¥–∞—á—É!",
            show_alert: true
          });
        }

        tasks = tasks.filter(t => t.id !== task.id);
        saveTasks();

        await bot.deleteMessage(chatId, messageId).catch(() => console.log("–ù–µ –≤–¥–∞–ª–æ—Å—å –≤–∏–¥–∞–ª–∏—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è"));
        bot.sendMessage(chatId, `üóëÔ∏è –ó–∞–¥–∞—á–∞ #${task.id} –≤–∏–¥–∞–ª–µ–Ω–∞`);

        if (task.takenById && task.takenById !== userId) {
          safeSendMessage(task.takenById, `üóëÔ∏è –ó–∞–¥–∞—á–∞ #${task.id} "${task.title}" –≤–∏–¥–∞–ª–µ–Ω–∞ –∞–≤—Ç–æ—Ä–æ–º`)
            .catch(() => console.log("–ù–µ –≤–¥–∞–ª–æ—Å—å –ø–æ–≤—ñ–¥–æ–º–∏—Ç–∏ –≤–∏–∫–æ–Ω–∞–≤—Ü—è"));
        }
        break;
    }

    bot.answerCallbackQuery(query.id);
  } catch (error) {
    console.error("–ü–æ–º–∏–ª–∫–∞ –æ–±—Ä–æ–±–∫–∏ callback:", error);
    bot.answerCallbackQuery(query.id, { text: "‚ùå –ü–æ–º–∏–ª–∫–∞ –æ–±—Ä–æ–±–∫–∏ –∑–∞–ø–∏—Ç—É" });
  }
});

// ====== –ö–æ–º–∞–Ω–¥–∏ ======
bot.onText(/\/take (\d+)/, (msg, match) => {
  const task = tasks.find(t => t.id === parseInt(match[1]));
  if (!task) return bot.sendMessage(msg.chat.id, `‚ùå –ó–∞–¥–∞—á–∞ #${match[1]} –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∞`);
  
  if (task.status === "–í–∏–∫–æ–Ω–∞–Ω–æ ‚úÖ") {
    return bot.sendMessage(msg.chat.id, "‚ùå –ó–∞–¥–∞—á–∞ –≤–∂–µ –≤–∏–∫–æ–Ω–∞–Ω–∞");
  }
  
  task.status = "–í–∑—è–≤—Å—è üèÉ";
  task.takenByName = msg.from.username || msg.from.first_name;
  task.takenById = msg.from.id;
  saveTasks();
  
  bot.sendMessage(msg.chat.id, `üîπ –ó–∞–¥–∞—á–∞ #${task.id} –≤–∑—è—Ç–∞ ${task.takenByName}`);
  
  if (task.authorId && task.authorId !== msg.from.id) {
    safeSendMessage(
      task.authorId,
      `üîπ –ó–∞–¥–∞—á–∞ #${task.id} "${task.title}" –≤–∑—è—Ç–∞ ${task.takenByName}`
    ).catch(() => console.log("–ù–µ –≤–¥–∞–ª–æ—Å—å –ø–æ–≤—ñ–¥–æ–º–∏—Ç–∏ –∞–≤—Ç–æ—Ä–∞"));
  }
});

bot.onText(/\/done (\d+)/, (msg, match) => {
  const task = tasks.find(t => t.id === parseInt(match[1]));
  if (!task) return bot.sendMessage(msg.chat.id, `‚ùå –ó–∞–¥–∞—á–∞ #${match[1]} –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∞`);
  
  task.status = "–í–∏–∫–æ–Ω–∞–Ω–æ ‚úÖ";
  saveTasks();
  bot.sendMessage(msg.chat.id, `‚úÖ –ó–∞–¥–∞—á–∞ #${task.id} –≤–∏–∫–æ–Ω–∞–Ω–∞!`);
  
  if (task.authorId && task.authorId !== msg.from.id) {
    safeSendMessage(
      task.authorId,
      `‚úÖ –ó–∞–¥–∞—á–∞ #${task.id} "${task.title}" –≤–∏–∫–æ–Ω–∞–Ω–∞ ${task.takenByName || msg.from.first_name}`
    ).catch(() => console.log("–ù–µ –≤–¥–∞–ª–æ—Å—å –ø–æ–≤—ñ–¥–æ–º–∏—Ç–∏ –∞–≤—Ç–æ—Ä–∞"));
  }
});

bot.onText(/\/delete (\d+)/, (msg, match) => {
  const task = tasks.find(t => t.id === parseInt(match[1]));
  if (!task) return bot.sendMessage(msg.chat.id, `‚ùå –ó–∞–¥–∞—á–∞ #${match[1]} –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∞`);

  if (msg.from.id !== task.authorId) {
    return bot.sendMessage(msg.chat.id, "‚õî –õ–∏—à–µ –ø–æ—Å—Ç–∞–Ω–æ–≤–Ω–∏–∫ –º–æ–∂–µ –≤–∏–¥–∞–ª—è—Ç–∏ —Ü—é –∑–∞–¥–∞—á—É!");
  }

  tasks = tasks.filter(t => t.id !== task.id);
  saveTasks();
  bot.sendMessage(msg.chat.id, `üóëÔ∏è –ó–∞–¥–∞—á–∞ #${task.id} –≤–∏–¥–∞–ª–µ–Ω–∞`);
  
  if (task.takenById && task.takenById !== msg.from.id) {
    safeSendMessage(task.takenById, `üóëÔ∏è –ó–∞–¥–∞—á–∞ #${task.id} "${task.title}" –≤–∏–¥–∞–ª–µ–Ω–∞ –∞–≤—Ç–æ—Ä–æ–º`)
      .catch(() => console.log("–ù–µ –≤–¥–∞–ª–æ—Å—å –ø–æ–≤—ñ–¥–æ–º–∏—Ç–∏ –≤–∏–∫–æ–Ω–∞–≤—Ü—è"));
  }
});

bot.onText(/\/tasks$/, (msg) => {
  const chatId = msg.chat.id;
  if (tasks.length === 0) return bot.sendMessage(chatId, "üì≠ –ó–∞–¥–∞—á –ø–æ–∫–∏ –Ω–µ–º–∞—î");

  const activeTasks = tasks.filter(t => t.status !== "–í–∏–∫–æ–Ω–∞–Ω–æ ‚úÖ" && t.chatId === chatId);
  if (activeTasks.length === 0) return bot.sendMessage(chatId, "‚úÖ –í—Å—ñ –∑–∞–¥–∞—á—ñ –≤–∏–∫–æ–Ω–∞–Ω—ñ!");

  activeTasks.forEach(task => {
    const deadlineStr = task.deadline ? moment(task.deadline).tz(TIMEZONE).format("DD.MM, HH:mm") : "–Ω–µ –≤–∫–∞–∑–∞–Ω–æ";
    const responsible = task.takenByName || (task.mentionedUsername ? `@${task.mentionedUsername}` : "–Ω–µ –ø—Ä–∏–∑–Ω–∞—á–µ–Ω–æ");

    const buttons = [
      { text: "üèÉ –í–∑—è—Ç–∏", callback_data: `take_${task.id}` },
      { text: "‚úÖ –í–∏–∫–æ–Ω–∞—Ç–∏", callback_data: `done_${task.id}` },
      { text: "üóëÔ∏è –í–∏–¥–∞–ª–∏—Ç–∏", callback_data: `delete_${task.id}` },
      { text: "‚úèÔ∏è –ó–º—ñ–Ω–∏—Ç–∏ –¥–µ–¥–ª–∞–π–Ω", callback_data: `changeDeadline_${task.id}` }
    ];

    bot.sendMessage(
      chatId,
      `#${task.id} - ${task.title}\n–°—Ç–∞—Ç—É—Å: ${task.status}\n–í—ñ–¥–ø–æ–≤—ñ–¥–∞–ª—å–Ω–∏–π: ${responsible}\n–î–µ–¥–ª–∞–π–Ω: ${deadlineStr}`,
      { reply_markup: { inline_keyboard: chunkButtons(buttons, 2) } }
    );
  });
});

bot.onText(/\/tasks_status/, (msg) => {
  const chatId = msg.chat.id;
  if (tasks.length === 0) return bot.sendMessage(chatId, "üì≠ –ó–∞–¥–∞—á –ø–æ–∫–∏ –Ω–µ–º–∞—î");

  const incomplete = tasks.filter(t => t.status !== "–í–∏–∫–æ–Ω–∞–Ω–æ ‚úÖ" && t.chatId === chatId);
  const completed = tasks.filter(t => t.status === "–í–∏–∫–æ–Ω–∞–Ω–æ ‚úÖ" && t.chatId === chatId);

  let text = "üìä *–°—Ç–∞—Ç—É—Å –∑–∞–¥–∞—á:*\n\n";
  text += "üìå *–ê–∫—Ç–∏–≤–Ω—ñ:*\n";
  text += incomplete.length === 0 ? "_–Ω–µ–º–∞—î_\n" : 
    incomplete.map(t => `#${t.id} - ${t.title} (${t.status})`).join('\n');
  
  text += "\n\n‚úÖ *–í–∏–∫–æ–Ω–∞–Ω—ñ:*\n";
  text += completed.length === 0 ? "_–Ω–µ–º–∞—î_\n" : 
    completed.map(t => `#${t.id} - ${t.title}`).join('\n');

  bot.sendMessage(chatId, text, { parse_mode: "Markdown" });
});

bot.onText(/\/help/, (msg) => {
  bot.sendMessage(msg.chat.id, `üìù –Ü–Ω—Å—Ç—Ä—É–∫—Ü—ñ—è:
  
–°—Ç–≤–æ—Ä–µ–Ω–Ω—è –∑–∞–¥–∞—á:
$ –ó–∞–¥–∞—á–∞ 25.12 14:30 @username - —Ç–µ—Ä–º—ñ–Ω–æ–≤–∞ (4 –≥–æ–¥.)
# –ó–∞–¥–∞—á–∞ 25.12 14:30 @username - –∑–≤–∏—á–∞–π–Ω–∞ (2 –≥–æ–¥.)
! –ó–∞–¥–∞—á–∞ 25.12 14:30 @username - –æ–ø—Ü—ñ–æ–Ω–∞–ª—å–Ω–∞ (1 –≥–æ–¥.)

–ö–æ–º–∞–Ω–¥–∏:
/take N - –≤–∑—è—Ç–∏ –∑–∞–¥–∞—á—É
/done N - –∑–∞–≤–µ—Ä—à–∏—Ç–∏ –∑–∞–¥–∞—á—É  
/delete N - –≤–∏–¥–∞–ª–∏—Ç–∏ –∑–∞–¥–∞—á—É
/tasks - —Å–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω–∏—Ö –∑–∞–¥–∞—á
/tasks_status - —Å—Ç–∞—Ç—É—Å –≤—Å—ñ—Ö –∑–∞–¥–∞—á

–ö–Ω–æ–ø–∫–∏:
üèÉ - –≤–∑—è—Ç–∏ –∑–∞–¥–∞—á—É
‚úÖ - –≤–∏–∫–æ–Ω–∞—Ç–∏ –∑–∞–¥–∞—á—É
üóëÔ∏è - –≤–∏–¥–∞–ª–∏—Ç–∏ –∑–∞–¥–∞—á—É
‚úèÔ∏è - –∑–º—ñ–Ω–∏—Ç–∏ –¥–µ–¥–ª–∞–π–Ω
‚è∞ - –Ω–∞–ª–∞—à—Ç—É–≤–∞—Ç–∏ –Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è`);
});

// ====== –ù–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è ======
// ====== –ù–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è ======
// setInterval(() => {
//   const now = moment().tz(TIMEZONE);

//   tasks.forEach(task => {
//     if (!task.deadline || task.status === "–í–∏–∫–æ–Ω–∞–Ω–æ ‚úÖ") return;

//     const diffMinutes = moment(task.deadline).diff(now, "minutes");
//     if (diffMinutes <= 0) return; // –î–µ–¥–ª–∞–π–Ω –≤–∂–µ –ø—Ä–æ–π—à–æ–≤

//     const diffHours = Math.ceil(diffMinutes / 60);
//     task.sentReminders = task.sentReminders || [];

//     // –ù–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è –≤–∏–∫–æ–Ω–∞–≤—Ü—é —â–æ–≥–æ–¥–∏–Ω–∏ (—è–∫—â–æ –∑–∞–ª–∏—à–∏–ª–æ—Å—å 4 –≥–æ–¥ —ñ –º–µ–Ω—à–µ)
//     const defaultRemindHours = { –≤–∏—Å–æ–∫–∏–π: 4, —Å–µ—Ä–µ–¥–Ω—ñ–π: 2, –Ω–∏–∑—å–∫–∏–π: 1 }[task.priority] || 1;
//     const customRemindHours = task.reminderMinutes ? task.reminderMinutes / 60 : null;
//     const maxRemindHours = customRemindHours || defaultRemindHours;

//     if (diffHours <= maxRemindHours && diffHours > 0 && !task.sentReminders.includes(diffHours)) {
//       if (task.takenById) {
//         // –í–∏–∫–æ–Ω–∞–≤–µ—Ü—å –≤–∑—è–≤ –∑–∞–¥–∞—á—É - –Ω–∞–¥—Å–∏–ª–∞—î–º–æ –π–æ–º—É
//         const text = `‚è∞ –ù–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è! –ó–∞–¥–∞—á–∞ #${task.id} "${task.title}"\n–î–µ–¥–ª–∞–π–Ω —á–µ—Ä–µ–∑ ${diffHours} –≥–æ–¥.`;
//         const buttons = [[{ text: "‚úÖ –í–∏–∫–æ–Ω–∞–Ω–æ", callback_data: `done_${task.id}` }]];
        
//         safeSendMessage(task.takenById, text, { reply_markup: { inline_keyboard: buttons } })
//           .catch(() => {
//             // –Ø–∫—â–æ –≤–∏–∫–æ–Ω–∞–≤–µ—Ü—å –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π - –Ω–∞–¥—Å–∏–ª–∞—î–º–æ –≤ –≥—Ä—É–ø—É
//             safeSendMessage(task.chatId, text);
//           });
        
//         task.sentReminders.push(diffHours);
//       } else if (task.mentionedUsername) {
//         // –ó–∞–¥–∞—á—É –ø—Ä–∏–∑–Ω–∞—á–∏–ª–∏, –∞–ª–µ –Ω–µ –≤–∑—è–ª–∏ - –Ω–∞–¥—Å–∏–ª–∞—î–º–æ –ø—Ä–∏–∑–Ω–∞—á–µ–Ω–æ–º—É
//         const mentionedId = userIds[task.mentionedUsername];
//         if (mentionedId) {
//           const text = `‚è∞ –ù–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è! –ó–∞–¥–∞—á–∞ #${task.id} "${task.title}"\n–î–µ–¥–ª–∞–π–Ω —á–µ—Ä–µ–∑ ${diffHours} –≥–æ–¥.\n\n‚ö†Ô∏è –ù–µ –∑–∞–±—É–¥—å—Ç–µ –≤–∑—è—Ç–∏ –∑–∞–¥–∞—á—É!`;
//           const buttons = [[
//             { text: "üèÉ –í–∑—è—Ç–∏", callback_data: `take_${task.id}` },
//             { text: "‚úÖ –í–∏–∫–æ–Ω–∞–Ω–æ", callback_data: `done_${task.id}` }
//           ]];
          
//           safeSendMessage(mentionedId, text, { reply_markup: { inline_keyboard: buttons } })
//             .catch(() => {
//               // –Ø–∫—â–æ –ø—Ä–∏–∑–Ω–∞—á–µ–Ω–∏–π –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π - –Ω–∞–¥—Å–∏–ª–∞—î–º–æ –≤ –≥—Ä—É–ø—É
//               safeSendMessage(task.chatId, text);
//             });
//         } else {
//           // –ü—Ä–∏–∑–Ω–∞—á–µ–Ω–∏–π —â–µ –Ω–µ –∑–∞–ø—É—Å—Ç–∏–≤ –±–æ—Ç–∞ - –Ω–∞–¥—Å–∏–ª–∞—î–º–æ –≤ –≥—Ä—É–ø—É
//           const text = `‚è∞ –ó–∞–¥–∞—á–∞ #${task.id} "${task.title}"\n–î–µ–¥–ª–∞–π–Ω —á–µ—Ä–µ–∑ ${diffHours} –≥–æ–¥.\n‚ö†Ô∏è @${task.mentionedUsername} —â–µ –Ω–µ –≤–∑—è–≤ –∑–∞–¥–∞—á—É!`;
//           safeSendMessage(task.chatId, text);
//         }
        
//         task.sentReminders.push(diffHours);
//       }
//       // –Ø–∫—â–æ –∑–∞–¥–∞—á–∞ –±–µ–∑ –ø—Ä–∏–∑–Ω–∞—á–µ–Ω–æ–≥–æ - –Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è –Ω–µ –Ω–∞–¥—Å–∏–ª–∞—î–º–æ
//     }

//     // –ù–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è –ø—Ä–æ –Ω–µ–≤–∑—è—Ç—ñ –∑–∞–¥–∞—á—ñ (–¥–ª—è –∞–≤—Ç–æ—Ä–∞)
//     if (!task.takenById && !task.remindedNotTaken) {
//       const hoursSinceCreation = (now - moment(task.createdAt)) / (1000 * 60 * 60);
//       const maxWait = { –≤–∏—Å–æ–∫–∏–π: 2, —Å–µ—Ä–µ–¥–Ω—ñ–π: 3, –Ω–∏–∑—å–∫–∏–π: 4 }[task.priority] || 3;
      
//       if (hoursSinceCreation >= maxWait) {
//         const text = `‚ö†Ô∏è –ó–∞–¥–∞—á–∞ #${task.id} "${task.title}" —â–µ –Ω–µ –≤–∑—è—Ç–∞!\n–ü—Ä–∏–∑–Ω–∞—á–µ–Ω–∞: ${task.mentionedUsername ? `@${task.mentionedUsername}` : '–Ω–µ –ø—Ä–∏–∑–Ω–∞—á–µ–Ω–æ'}`;
        
//         // –ù–∞–¥—Å–∏–ª–∞—î–º–æ –∞–≤—Ç–æ—Ä—É
//         safeSendMessage(task.authorId, text)
//           .catch(() => {
//             // –Ø–∫—â–æ –∞–≤—Ç–æ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π - –Ω–∞–¥—Å–∏–ª–∞—î–º–æ –≤ –≥—Ä—É–ø—É
//             safeSendMessage(task.chatId, text);
//           });
        
//         task.remindedNotTaken = true;
//       }
//     }
//   });

//   saveTasks();
// }, 60 * 1000);
setInterval(() => {
  const now = moment().tz(TIMEZONE);

  tasks.forEach(task => {
    if (!task.deadline || task.status === "–í–∏–∫–æ–Ω–∞–Ω–æ ‚úÖ") return;

    const diffMinutes = moment(task.deadline).diff(now, "minutes");
    if (diffMinutes <= 0) return;

    const diffHours = Math.ceil(diffMinutes / 60);
    task.sentReminders = task.sentReminders || [];

    // –í–∏–∑–Ω–∞—á–∞—î–º–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É –∫—ñ–ª—å–∫—ñ—Å—Ç—å –≥–æ–¥–∏–Ω –¥–ª—è –Ω–∞–≥–∞–¥—É–≤–∞–Ω—å
    const defaultRemindHours = { –≤–∏—Å–æ–∫–∏–π: 4, —Å–µ—Ä–µ–¥–Ω—ñ–π: 2, –Ω–∏–∑—å–∫–∏–π: 1 }[task.priority] || 1;
    const maxRemindHours = task.reminderMinutes ? Math.ceil(task.reminderMinutes / 60) : defaultRemindHours;

    // –ù–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è —â–æ–≥–æ–¥–∏–Ω–∏
    if (diffHours <= maxRemindHours && diffHours > 0 && !task.sentReminders.includes(diffHours)) {
      if (task.takenById) {
        const text = `‚è∞ –ù–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è! –ó–∞–¥–∞—á–∞ #${task.id} "${task.title}"\n–î–µ–¥–ª–∞–π–Ω —á–µ—Ä–µ–∑ ${diffHours} –≥–æ–¥.`;
        const buttons = [[{ text: "‚úÖ –í–∏–∫–æ–Ω–∞–Ω–æ", callback_data: `done_${task.id}` }]];
        
        safeSendMessage(task.takenById, text, { reply_markup: { inline_keyboard: buttons } })
          .catch(() => {
            safeSendMessage(task.chatId, text);
          });
        
        task.sentReminders.push(diffHours);
      } else if (task.mentionedUsername) {
        const mentionedId = userIds[task.mentionedUsername];
        if (mentionedId) {
          const text = `‚è∞ –ù–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è! –ó–∞–¥–∞—á–∞ #${task.id} "${task.title}"\n–î–µ–¥–ª–∞–π–Ω —á–µ—Ä–µ–∑ ${diffHours} –≥–æ–¥.\n\n‚ö†Ô∏è –ù–µ –∑–∞–±—É–¥—å—Ç–µ –≤–∑—è—Ç–∏ –∑–∞–¥–∞—á—É!`;
          const buttons = [[
            { text: "üèÉ –í–∑—è—Ç–∏", callback_data: `take_${task.id}` },
            { text: "‚úÖ –í–∏–∫–æ–Ω–∞–Ω–æ", callback_data: `done_${task.id}` }
          ]];
          
          safeSendMessage(mentionedId, text, { reply_markup: { inline_keyboard: buttons } })
            .catch(() => {
              safeSendMessage(task.chatId, text);
            });
        } else {
          const text = `‚è∞ –ó–∞–¥–∞—á–∞ #${task.id} "${task.title}"\n–î–µ–¥–ª–∞–π–Ω —á–µ—Ä–µ–∑ ${diffHours} –≥–æ–¥.\n‚ö†Ô∏è @${task.mentionedUsername} —â–µ –Ω–µ –≤–∑—è–≤ –∑–∞–¥–∞—á—É!`;
          safeSendMessage(task.chatId, text);
        }
        
        task.sentReminders.push(diffHours);
      }
    }

    // –ù–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è –ø—Ä–æ –Ω–µ–≤–∑—è—Ç—ñ –∑–∞–¥–∞—á—ñ
    if (!task.takenById && !task.remindedNotTaken) {
      const hoursSinceCreation = (now - moment(task.createdAt)) / (1000 * 60 * 60);
      const maxWait = { –≤–∏—Å–æ–∫–∏–π: 2, —Å–µ—Ä–µ–¥–Ω—ñ–π: 3, –Ω–∏–∑—å–∫–∏–π: 4 }[task.priority] || 3;
      
      if (hoursSinceCreation >= maxWait) {
        const text = `‚ö†Ô∏è –ó–∞–¥–∞—á–∞ #${task.id} "${task.title}" —â–µ –Ω–µ –≤–∑—è—Ç–∞!\n–ü—Ä–∏–∑–Ω–∞—á–µ–Ω–∞: ${task.mentionedUsername ? `@${task.mentionedUsername}` : '–Ω–µ –ø—Ä–∏–∑–Ω–∞—á–µ–Ω–æ'}`;
        
        safeSendMessage(task.authorId, text)
          .catch(() => {
            safeSendMessage(task.chatId, text);
          });
        
        task.remindedNotTaken = true;
      }
    }
  });

  saveTasks();
}, 60 * 1000);

let lastDailyReport = null;
// ‚úÖ –í–ò–ü–†–ê–í–õ–ï–ù–ù–Ø 3: –©–æ–¥–µ–Ω–Ω–∏–π –∑–≤—ñ—Ç –æ 18:00

// –≤–∞—Ä—ñ–∞–Ω—Ç 2
// setInterval(() => {
//   const now = moment().tz(TIMEZONE);
//   const today = now.format("YYYY-MM-DD");
  
//   // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ —Å–∞–º–µ 18:00
//   if (now.hour() === 18 && now.minute() === 0 && lastDailyReport !== today) {
//     lastDailyReport = today;

//     const activeTasks = tasks.filter(t => t.status !== "–í–∏–∫–æ–Ω–∞–Ω–æ ‚úÖ");
//     const completedTasks = tasks.filter(t => 
//       {
//         if (t.status !== "–í–∏–∫–æ–Ω–∞–Ω–æ ‚úÖ") return false;
//         if (!t.completedAt) return false;
//         const completedDate = moment(t.completedAt).tz(TIMEZONE);
//         return completedDate.isSame(now, "day");
//         }
//     );
    
//     if (activeTasks.length === 0 && completedTasks.length === 0) return;

//     let text = "üìä *–©–æ–¥–µ–Ω–Ω–∏–π –∑–≤—ñ—Ç:*\n\n";
    
//     // –ê–∫—Ç–∏–≤–Ω—ñ –∑–∞–¥–∞—á—ñ
//     text += "üìå *–ù–µ–≤–∏–∫–æ–Ω–∞–Ω—ñ –∑–∞–¥–∞—á—ñ:*\n";
//     if (activeTasks.length === 0) {
//       text += "_–Ω–µ–º–∞—î_\n";
//     } else {
//       activeTasks.forEach(task => {
//         const deadlineStr = task.deadline ? moment(task.deadline).tz(TIMEZONE).format("DD.MM HH:mm") : "–Ω–µ –≤–∫–∞–∑–∞–Ω–æ";
//         const responsible = task.takenByName || (task.mentionedUsername ? `@${task.mentionedUsername}` : "–Ω–µ –ø—Ä–∏–∑–Ω–∞—á–µ–Ω–æ");
//         text += `#${task.id} - ${task.title}\n   –í—ñ–¥–ø–æ–≤—ñ–¥–∞–ª—å–Ω–∏–π: ${responsible}\n   –î–µ–¥–ª–∞–π–Ω: ${deadlineStr}\n\n`;
//       });
//     }
    
//     // –í–∏–∫–æ–Ω–∞–Ω—ñ –∑–∞–¥–∞—á—ñ
//     text += "‚úÖ *–í–∏–∫–æ–Ω–∞–Ω—ñ —Å—å–æ–≥–æ–¥–Ω—ñ:*\n";
//     if (completedTasks.length === 0) {
//       text += "_–Ω–µ–º–∞—î_\n";
//     } else {
//       completedTasks.forEach(task => {
//         const responsible = task.takenByName || task.authorName;
//         text += `#${task.id} - ${task.title} (${responsible})\n`;
//       });
//     }

//     // –ù–∞–¥—Å–∏–ª–∞—î–º–æ –≤—Å—ñ–º –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞–º
//     // Object.values(userIds).forEach(uid => {
//     //   safeSendMessage(uid, text, { parse_mode: "Markdown" })
//     //     .catch(() => console.log(`–ù–µ –≤–¥–∞–ª–æ—Å—å –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ –∑–≤—ñ—Ç –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É ${uid}`));
//     // });
//     // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ –≤—Å—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω—ñ
//     const allUsersRegistered = Object.keys(userIds).length > 0;
//     let hasUnregisteredUsers = false;
    
//     // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –Ω–∞—è–≤–Ω—ñ—Å—Ç—å –Ω–µ–∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤
//     const allUsernames = new Set();
//     tasks.forEach(task => {
//       if (task.authorName && task.authorName.startsWith('@') === false) {
//         allUsernames.add(task.authorName);
//       }
//       if (task.takenByName && task.takenByName.startsWith('@') === false) {
//         allUsernames.add(task.takenByName);
//       }
//       if (task.mentionedUsername) {
//         allUsernames.add(task.mentionedUsername);
//       }
//     });

//     // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ —î —Ö—Ç–æ—Å—å –Ω–µ–∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω–∏–π
//     allUsernames.forEach(username => {
//       if (!userIds[username]) {
//         hasUnregisteredUsers = true;
//       }
//     });

//     // –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –∑–≤—ñ—Ç
//     if (hasUnregisteredUsers) {
//       // –Ø–∫—â–æ —î –Ω–µ–∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω—ñ - –≤—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –≤ –≥—Ä—É–ø—É
//       const groupChatIds = new Set();
//       tasks.forEach(task => {
//         if (task.chatId) groupChatIds.add(task.chatId);
//       });
      
//       groupChatIds.forEach(chatId => {
//         safeSendMessage(chatId, text, { parse_mode: "Markdown" })
//           .catch(() => console.log(`–ù–µ –≤–¥–∞–ª–æ—Å—å –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ –∑–≤—ñ—Ç —É —á–∞—Ç ${chatId}`));
//       });
//     } else {
//       // –í—Å—ñ –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω—ñ - –≤—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –ø—Ä–∏–≤–∞—Ç–Ω–æ
//       Object.values(userIds).forEach(uid => {
//         safeSendMessage(uid, text, { parse_mode: "Markdown" })
//           .catch(() => console.log(`–ù–µ –≤–¥–∞–ª–æ—Å—å –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ –∑–≤—ñ—Ç –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É ${uid}`));
//       });
//     }
//   }
// }, 60 * 1000);
setInterval(() => {
  const now = moment().tz(TIMEZONE);
  const today = now.format("YYYY-MM-DD");
  
  if (now.hour() === 18 && now.minute() === 0 && lastDailyReport !== today) {
    lastDailyReport = today;

    // –ì—Ä—É–ø—É—î–º–æ –∑–∞–¥–∞—á—ñ –ø–æ chatId (–≥—Ä—É–ø–∞–º)
    const tasksByChat = {};
    tasks.forEach(task => {
      if (!tasksByChat[task.chatId]) {
        tasksByChat[task.chatId] = [];
      }
      tasksByChat[task.chatId].push(task);
    });

    // –î–ª—è –∫–æ–∂–Ω–æ—ó –≥—Ä—É–ø–∏ —Ñ–æ—Ä–º—É—î–º–æ –∑–≤—ñ—Ç
    Object.entries(tasksByChat).forEach(([chatId, chatTasks]) => {
      const activeTasks = chatTasks.filter(t => t.status !== "–í–∏–∫–æ–Ω–∞–Ω–æ ‚úÖ");
      const completedToday = chatTasks.filter(t => {
        if (t.status !== "–í–∏–∫–æ–Ω–∞–Ω–æ ‚úÖ" || !t.completedAt) return false;
        const completedDate = moment(t.completedAt).tz(TIMEZONE);
        return completedDate.isSame(now, "day");
      });
      
      if (activeTasks.length === 0 && completedToday.length === 0) return;

      let text = "üìä *–©–æ–¥–µ–Ω–Ω–∏–π –∑–≤—ñ—Ç:*\n\n";
      
      text += "üìå *–ù–µ–≤–∏–∫–æ–Ω–∞–Ω—ñ –∑–∞–¥–∞—á—ñ:*\n";
      if (activeTasks.length === 0) {
        text += "_–Ω–µ–º–∞—î_\n";
      } else {
        activeTasks.forEach(task => {
          const deadlineStr = task.deadline ? moment(task.deadline).tz(TIMEZONE).format("DD.MM HH:mm") : "–Ω–µ –≤–∫–∞–∑–∞–Ω–æ";
          const responsible = task.takenByName || (task.mentionedUsername ? `@${task.mentionedUsername}` : "–Ω–µ –ø—Ä–∏–∑–Ω–∞—á–µ–Ω–æ");
          text += `#${task.id} - ${task.title}\n   –í—ñ–¥–ø–æ–≤—ñ–¥–∞–ª—å–Ω–∏–π: ${responsible}\n   –î–µ–¥–ª–∞–π–Ω: ${deadlineStr}\n\n`;
        });
      }
      
      text += "‚úÖ *–í–∏–∫–æ–Ω–∞–Ω—ñ —Å—å–æ–≥–æ–¥–Ω—ñ:*\n";
      if (completedToday.length === 0) {
        text += "_–Ω–µ–º–∞—î_\n";
      } else {
        completedToday.forEach(task => {
          const responsible = task.takenByName || task.authorName;
          text += `#${task.id} - ${task.title} (${responsible})\n`;
        });
      }

      // –ó–±–∏—Ä–∞—î–º–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤, —è–∫—ñ –º–∞—é—Ç—å –æ—Ç—Ä–∏–º–∞—Ç–∏ –∑–≤—ñ—Ç –∑ —Ü—ñ—î—ó –≥—Ä—É–ø–∏
      const usersInThisChat = new Set();
      
      chatTasks.forEach(task => {
        // –î–æ–¥–∞—î–º–æ –∞–≤—Ç–æ—Ä–∞
        if (task.authorName) usersInThisChat.add(task.authorName);
        // –î–æ–¥–∞—î–º–æ –≤–∏–∫–æ–Ω–∞–≤—Ü—è
        if (task.takenByName) usersInThisChat.add(task.takenByName);
        // –î–æ–¥–∞—î–º–æ –ø—Ä–∏–∑–Ω–∞—á–µ–Ω–æ–≥–æ
        if (task.mentionedUsername) usersInThisChat.add(task.mentionedUsername);
      });

      // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ –≤—Å—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω—ñ
      let hasUnregisteredUsers = false;
      usersInThisChat.forEach(username => {
        if (!userIds[username]) {
          hasUnregisteredUsers = true;
        }
      });

      if (hasUnregisteredUsers) {
        // –Ø–∫—â–æ —î –Ω–µ–∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω—ñ - –≤—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –≤ –≥—Ä—É–ø—É
        safeSendMessage(chatId, text, { parse_mode: "Markdown" })
          .catch(() => console.log(`–ù–µ –≤–¥–∞–ª–æ—Å—å –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ –∑–≤—ñ—Ç —É —á–∞—Ç ${chatId}`));
      } else {
        // –í—Å—ñ –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω—ñ - –≤—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –ø—Ä–∏–≤–∞—Ç–Ω–æ –∫–æ–∂–Ω–æ–º—É —É—á–∞—Å–Ω–∏–∫—É
        usersInThisChat.forEach(username => {
          const userId = userIds[username];
          if (userId) {
            safeSendMessage(userId, text, { parse_mode: "Markdown" })
              .catch(() => console.log(`–ù–µ –≤–¥–∞–ª–æ—Å—å –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ –∑–≤—ñ—Ç –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É ${username}`));
          }
        });
      }
    });
  }
}, 60 * 1000);

// ====== –í–µ–±-—Å–µ—Ä–≤–µ—Ä ======
const app = express();
app.get("/", (req, res) => res.send("–ë–æ—Ç –ø—Ä–∞—Ü—é—î!"));
app.listen(process.env.PORT || 3000, () => console.log("–°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω–æ"));

console.log("ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω–æ");